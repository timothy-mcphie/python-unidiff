diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 1a91be2..536b111 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -51,47 +51,65 @@ Getting Started
 + Make sure you have a [JIRA account](https://issues.apache.org/jira/).
 + Make sure you have a [GitHub account](https://github.com/signup/free).
 + If you're planning to implement a new feature it makes sense to discuss you're changes on the [dev list](https://commons.apache.org/mail-lists.html) first. This way you can make sure you're not wasting your time on something that isn't considered to be in Apache Commons Collections's scope.
-+ Submit a ticket for your issue, assuming one does not already exist.
++ Submit a [Jira Ticket][jira] for your issue, assuming one does not already exist.
   + Clearly describe the issue including steps to reproduce when it is a bug.
   + Make sure you fill in the earliest version that you know has the issue.
-+ Fork the repository on GitHub.
++ Find the corresponding [repository on GitHub](https://github.com/apache/?query=commons-),
+[fork](https://help.github.com/articles/fork-a-repo/) and check out your forked repository.
 
 Making Changes
 --------------
 
-+ Create a topic branch from where you want to base your work (this is usually the master/trunk branch).
++ Create a _topic branch_ for your isolated work.
+  * Usually you should base your branch on the `master` or `trunk` branch.
+  * A good topic branch name can be the JIRA bug id plus a keyword, e.g. `COLLECTIONS-123-InputStream`.
+  * If you have submitted multiple JIRA issues, try to maintain separate branches and pull requests.
 + Make commits of logical units.
+  * Make sure your commit messages are meaningful and in the proper format. Your commit message should contain the key of the JIRA issue.
+  * e.g. `COLLECTIONS-123: Close input stream earlier`
 + Respect the original code style:
   + Only use spaces for indentation.
-  + Create minimal diffs - disable on save actions like reformat source code or organize imports. If you feel the source code should be reformatted create a separate PR for this change.
-  + Check for unnecessary whitespace with git diff --check before committing.
-+ Make sure your commit messages are in the proper format. Your commit message should contain the key of the JIRA issue.
-+ Make sure you have added the necessary tests for your changes.
+  + Create minimal diffs - disable _On Save_ actions like _Reformat Source Code_ or _Organize Imports_. If you feel the source code should be reformatted create a separate PR for this change first.
+  + Check for unnecessary whitespace with `git diff` -- check before committing.
++ Make sure you have added the necessary tests for your changes, typically in `src/test/java`.
 + Run all the tests with `mvn clean verify` to assure nothing else was accidentally broken.
 
 Making Trivial Changes
 ----------------------
 
+The JIRA tickets are used to generate the changelog for the next release.
+
 For changes of a trivial nature to comments and documentation, it is not always necessary to create a new ticket in JIRA.
 In this case, it is appropriate to start the first line of a commit with '(doc)' instead of a ticket number.
 
+
 Submitting Changes
 ------------------
 
-+ Sign the [Contributor License Agreement][cla] if you haven't already.
++ Sign and submit the Apache [Contributor License Agreement][cla] if you haven't already.
+  * Note that small patches & typical bug fixes do not require a CLA as
+    clause 5 of the [Apache License](https://www.apache.org/licenses/LICENSE-2.0.html#contributions)
+    covers them.
 + Push your changes to a topic branch in your fork of the repository.
-+ Submit a pull request to the repository in the apache organization.
++ Submit a _Pull Request_ to the corresponding repository in the `apache` organization.
+  * Verify _Files Changed_ shows only your intended changes and does not
+  include additional files like `target/*.class`
 + Update your JIRA ticket and include a link to the pull request in the ticket.
 
+If you prefer to not use GitHub, then you can instead use
+`git format-patch` (or `svn diff`) and attach the patch file to the JIRA issue.
+
+
 Additional Resources
 --------------------
 
 + [Contributing patches](https://commons.apache.org/patches.html)
-+ [Apache Commons Collections JIRA project page](https://issues.apache.org/jira/browse/COLLECTIONS)
++ [Apache Commons Collections JIRA project page][jira]
 + [Contributor License Agreement][cla]
 + [General GitHub documentation](https://help.github.com/)
 + [GitHub pull request documentation](https://help.github.com/send-pull-requests/)
 + [Apache Commons Twitter Account](https://twitter.com/ApacheCommons)
-+ #apachecommons IRC channel on freenode.org
++ `#apache-commons` IRC channel on `irc.freenode.net`
 
 [cla]:https://www.apache.org/licenses/#clas
+[jira]:https://issues.apache.org/jira/browse/COLLECTIONS
diff --git a/README.md b/README.md
index 1a5e87d..10a5e30 100644
--- a/README.md
+++ b/README.md
@@ -43,17 +43,12 @@
 Apache Commons Collections
 ===================
 
-[![Build Status](https://travis-ci.org/apache/commons-collections.svg?branch=trunk)](https://travis-ci.org/apache/commons-collections)
-[![Coverage Status](https://coveralls.io/repos/apache/commons-collections/badge.svg?branch=trunk&service=github)](https://coveralls.io/github/apache/commons-collections?branch=trunk)
-[![Maven Central](https://maven-badges.herokuapp.com/maven-central/org.apache.commons/commons-collections4/badge.svg)](https://maven-badges.herokuapp.com/maven-central/org.apache.commons/commons-collections4/)
-[![License](http://img.shields.io/:license-apache-blue.svg)](http://www.apache.org/licenses/LICENSE-2.0.html)
-
 The Apache Commons Collections package contains types that extend and augment the Java Collections Framework.
 
 Documentation
 -------------
 
-More information can be found on the [homepage](https://commons.apache.org/proper/commons-collections).
+More information can be found on the [Apache Commons Collections homepage](https://commons.apache.org/proper/commons-collections).
 The [JavaDoc](https://commons.apache.org/proper/commons-collections/javadocs/api-release) can be browsed.
 Questions related to the usage of Apache Commons Collections should be posted to the [user mailing list][ml].
 
@@ -74,7 +69,7 @@ Alternatively you can pull it from the central Maven repositories:
 Contributing
 ------------
 
-We accept PRs via github. The [developer mailing list][ml] is the main channel of communication for contributors.
+We accept Pull Requests via GitHub. The [developer mailing list][ml] is the main channel of communication for contributors.
 There are some guidelines which will make applying PRs easier for us:
 + No tabs! Please use spaces for indentation.
 + Respect the code style.
@@ -86,7 +81,9 @@ You can learn more about contributing via GitHub in our [contribution guidelines
 
 License
 -------
-Code is under the [Apache Licence v2](https://www.apache.org/licenses/LICENSE-2.0.txt).
+This code is under the [Apache Licence v2](https://www.apache.org/licenses/LICENSE-2.0).
+
+See the `NOTICE.txt` file for required notices and attributions.
 
 Donations
 ---------
@@ -96,8 +93,8 @@ Additional Resources
 --------------------
 
 + [Apache Commons Homepage](https://commons.apache.org/)
-+ [Apache Bugtracker (JIRA)](https://issues.apache.org/jira/)
++ [Apache Bugtracker (JIRA)](https://issues.apache.org/jira/browse/COLLECTIONS)
 + [Apache Commons Twitter Account](https://twitter.com/ApacheCommons)
-+ #apachecommons IRC channel on freenode.org
++ `#apache-commons` IRC channel on `irc.freenode.org`
 
 [ml]:https://commons.apache.org/mail-lists.html
diff --git a/pom.xml b/pom.xml
index 3fa9ed3..6a1e865 100644
--- a/pom.xml
+++ b/pom.xml
@@ -19,7 +19,7 @@
   <parent>
     <groupId>org.apache.commons</groupId>
     <artifactId>commons-parent</artifactId>
-    <version>38</version>
+    <version>40</version>
   </parent>
   <modelVersion>4.0.0</modelVersion>
   <groupId>org.apache.commons</groupId>
@@ -65,7 +65,7 @@
       <id>morgand</id>
     </developer>
     <developer>
-      <name>Gary D. Gregory</name>
+      <name>Gary Gregory</name>
       <id>ggregory</id>
     </developer>
     <developer>
@@ -438,13 +438,13 @@
     <dependency>
       <groupId>junit</groupId>
       <artifactId>junit</artifactId>
-      <version>4.11</version>
+      <version>4.12</version>
       <scope>test</scope>
     </dependency>
     <dependency>
       <groupId>org.easymock</groupId>
       <artifactId>easymock</artifactId>
-      <version>3.2</version>
+      <version>3.4</version>
       <scope>test</scope>
     </dependency>
   </dependencies>
diff --git a/src/changes/changes.xml b/src/changes/changes.xml
index a5f8cc1..86e2ece 100644
--- a/src/changes/changes.xml
+++ b/src/changes/changes.xml
@@ -20,7 +20,19 @@
     <title>Commons Collections Changes</title>
   </properties>
   <body>
-  <release version="4.2" date="YYYY-MM-DD" description="">
+  <release version="4.2" date="YYYY-MM-DD" description="New features">
+    <action issue="COLLECTIONS-594" dev="ggregory" type="fix" due-to="Javen O'Neal">
+      Web site spelling error: MultiValuedMapeList. 
+    </action>
+    <action issue="COLLECTIONS-597" dev="ggregory" type="fix" due-to="Enrique">
+       Correction of javadoc for org.apache.commons.collections4.functors.CatchAndRethrowClosure.
+    </action>
+    <action issue="COLLECTIONS-589" dev="ggregory" type="add" due-to="Gary Gregory">
+      Add null-safe MapUtils.size(Map&lt;?, ?>) method. 
+    </action>
+    <action issue="COLLECTIONS-586" dev="ggregory" type="add" due-to="Shailender Bathula, Gary Gregory">
+      PatriciaTrie prefixMap clear throws NullPointerException. 
+    </action>
   </release>
   <release version="4.1" date="2015-11-28" description="This is a security and minor release.">
     <action issue="COLLECTIONS-508" dev="tn" type="add">
diff --git a/src/main/java/org/apache/commons/collections4/Bag.java b/src/main/java/org/apache/commons/collections4/Bag.java
index 8697df5..d500506 100644
--- a/src/main/java/org/apache/commons/collections4/Bag.java
+++ b/src/main/java/org/apache/commons/collections4/Bag.java
@@ -70,6 +70,7 @@ public interface Bag<E> extends Collection<E> {
      * @param object  the object to add
      * @return <code>true</code> if the object was not already in the <code>uniqueSet</code>
      */
+    @Override
     boolean add(E object);
 
     /**
@@ -98,6 +99,7 @@ public interface Bag<E> extends Collection<E> {
      * @param object  the object to remove
      * @return <code>true</code> if this call changed the collection
      */
+    @Override
     boolean remove(Object object);
 
     /**
@@ -126,6 +128,7 @@ public interface Bag<E> extends Collection<E> {
      *
      * @return the total size of the Bag
      */
+    @Override
     int size();
 
     /**
@@ -144,6 +147,7 @@ public interface Bag<E> extends Collection<E> {
      * @param coll  the collection to check against
      * @return <code>true</code> if the Bag contains all the collection
      */
+    @Override
     boolean containsAll(Collection<?> coll);
 
     /**
@@ -162,6 +166,7 @@ public interface Bag<E> extends Collection<E> {
      * @param coll  the collection to remove
      * @return <code>true</code> if this call changed the collection
      */
+    @Override
     boolean removeAll(Collection<?> coll);
 
     /**
@@ -183,6 +188,7 @@ public interface Bag<E> extends Collection<E> {
      * @param coll  the collection to retain
      * @return <code>true</code> if this call changed the collection
      */
+    @Override
     boolean retainAll(Collection<?> coll);
 
     /**
@@ -192,6 +198,7 @@ public interface Bag<E> extends Collection<E> {
      *
      * @return iterator over all elements in the Bag
      */
+    @Override
     Iterator<E> iterator();
 
     // The following is not part of the formal Bag interface, however where possible
diff --git a/src/main/java/org/apache/commons/collections4/BidiMap.java b/src/main/java/org/apache/commons/collections4/BidiMap.java
index 1b8a34c..fbf342c 100644
--- a/src/main/java/org/apache/commons/collections4/BidiMap.java
+++ b/src/main/java/org/apache/commons/collections4/BidiMap.java
@@ -71,6 +71,7 @@ public interface BidiMap<K, V> extends IterableMap<K, V> {
      * @throws NullPointerException (optional) if the map limits the values to
      *  non-null and null was specified
      */
+    @Override
     V put(K key, V value);
 
     /**
@@ -140,5 +141,6 @@ public interface BidiMap<K, V> extends IterableMap<K, V> {
      *
      * @return a set view of the values contained in this map
      */
+    @Override
     Set<V> values();
 }
diff --git a/src/main/java/org/apache/commons/collections4/CollectionUtils.java b/src/main/java/org/apache/commons/collections4/CollectionUtils.java
index 5012fa0..334f20d 100644
--- a/src/main/java/org/apache/commons/collections4/CollectionUtils.java
+++ b/src/main/java/org/apache/commons/collections4/CollectionUtils.java
@@ -147,6 +147,7 @@ public class CollectionUtils {
             newList = new ArrayList<O>(elements.size());
         }
 
+        @Override
         public Iterator<O> iterator() {
             return elements.iterator();
         }
@@ -561,6 +562,7 @@ public class CollectionUtils {
 
         @SuppressWarnings({ "unchecked", "rawtypes" })
         final Transformer<E, ?> transformer = new Transformer() {
+            @Override
             public EquatorWrapper<?> transform(final Object input) {
                 return new EquatorWrapper(equator, input);
             }
@@ -1311,7 +1313,7 @@ public class CollectionUtils {
      *
      * @param object  the object to get the size of, may be null
      * @return the size of the specified collection or 0 if the object was null
-     * @throws IllegalArgumentException thrown if object is not recognised
+     * @throws IllegalArgumentException thrown if object is not recognized
      * @since 3.1
      */
     public static int size(final Object object) {
@@ -1362,7 +1364,7 @@ public class CollectionUtils {
      *
      * @param object  the object to get the size of, may be null
      * @return true if empty or null
-     * @throws IllegalArgumentException thrown if object is not recognised
+     * @throws IllegalArgumentException thrown if object is not recognized
      * @since 3.2
      */
     public static boolean sizeIsEmpty(final Object object) {
@@ -1693,6 +1695,7 @@ public class CollectionUtils {
                                               final Equator<? super E> equator) {
 
         final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {
+            @Override
             public EquatorWrapper<E> transform(E input) {
                 return new EquatorWrapper<E>(equator, input);
             }
@@ -1768,6 +1771,7 @@ public class CollectionUtils {
                                               final Equator<? super E> equator) {
 
         final Transformer<E, EquatorWrapper<E>> transformer = new Transformer<E, EquatorWrapper<E>>() {
+            @Override
             public EquatorWrapper<E> transform(E input) {
                 return new EquatorWrapper<E>(equator, input);
             }
diff --git a/src/main/java/org/apache/commons/collections4/ListUtils.java b/src/main/java/org/apache/commons/collections4/ListUtils.java
index 605bde3..3b0e7bc 100644
--- a/src/main/java/org/apache/commons/collections4/ListUtils.java
+++ b/src/main/java/org/apache/commons/collections4/ListUtils.java
@@ -580,16 +580,19 @@ public class ListUtils {
      * A helper class used to construct the longest common subsequence.
      */
     private static final class LcsVisitor<E> implements CommandVisitor<E> {
-        private ArrayList<E> sequence;
+        private final ArrayList<E> sequence;
 
         public LcsVisitor() {
             sequence = new ArrayList<E>();
         }
 
+        @Override
         public void visitInsertCommand(final E object) {}
 
+        @Override
         public void visitDeleteCommand(final E object) {}
 
+        @Override
         public void visitKeepCommand(final E object) {
             sequence.add(object);
         }
diff --git a/src/main/java/org/apache/commons/collections4/MapIterator.java b/src/main/java/org/apache/commons/collections4/MapIterator.java
index 6c6d36f..f5647be 100644
--- a/src/main/java/org/apache/commons/collections4/MapIterator.java
+++ b/src/main/java/org/apache/commons/collections4/MapIterator.java
@@ -52,6 +52,7 @@ public interface MapIterator<K, V> extends Iterator<K> {
      *
      * @return <code>true</code> if the iterator has more elements
      */
+    @Override
     boolean hasNext();
 
     /**
@@ -60,6 +61,7 @@ public interface MapIterator<K, V> extends Iterator<K> {
      * @return the next key in the iteration
      * @throws java.util.NoSuchElementException if the iteration is finished
      */
+    @Override
     K next();
 
     //-----------------------------------------------------------------------
@@ -92,6 +94,7 @@ public interface MapIterator<K, V> extends Iterator<K> {
      * @throws IllegalStateException if <code>remove()</code> has already been called
      *  since the last call to <code>next()</code>
      */
+    @Override
     void remove();
 
     /**
diff --git a/src/main/java/org/apache/commons/collections4/MapUtils.java b/src/main/java/org/apache/commons/collections4/MapUtils.java
index 39f3338..2b0c65c 100644
--- a/src/main/java/org/apache/commons/collections4/MapUtils.java
+++ b/src/main/java/org/apache/commons/collections4/MapUtils.java
@@ -1794,4 +1794,13 @@ public class MapUtils {
                                                         new AbstractSortedMapDecorator<K, V>(sortedMap) {};
     }
 
+    /**
+     * Gets the given map size or 0 if the map is null
+     * @param map a Map or null
+     * @return the given map size or 0 if the map is null
+     */
+    public static int size(Map<?, ?> map) {
+        return map == null ? 0 : map.size();
+    }
+
 }
diff --git a/src/main/java/org/apache/commons/collections4/MultiMap.java b/src/main/java/org/apache/commons/collections4/MultiMap.java
index aa58e3c..e77ef59 100644
--- a/src/main/java/org/apache/commons/collections4/MultiMap.java
+++ b/src/main/java/org/apache/commons/collections4/MultiMap.java
@@ -75,6 +75,7 @@ public interface MultiMap<K, V> extends IterableMap<K, Object> {
      *
      * @return the number of key-collection mappings in this map
      */
+    @Override
     int size();
 
     /**
@@ -96,6 +97,7 @@ public interface MultiMap<K, V> extends IterableMap<K, Object> {
      * @throws ClassCastException if the key is of an invalid type
      * @throws NullPointerException if the key is null and null keys are invalid
      */
+    @Override
     Object get(Object key); // Cannot use get(K key) as that does not properly implement Map#get
 
     /**
@@ -109,6 +111,7 @@ public interface MultiMap<K, V> extends IterableMap<K, Object> {
      * @throws ClassCastException if the value is of an invalid type
      * @throws NullPointerException if the value is null and null value are invalid
      */
+    @Override
     boolean containsValue(Object value);
 
     /**
@@ -127,6 +130,7 @@ public interface MultiMap<K, V> extends IterableMap<K, Object> {
      * @throws NullPointerException if the key or value is null and null is invalid
      * @throws IllegalArgumentException if the key or value is invalid
      */
+    @Override
     Object put(K key, Object value);
 
     /**
@@ -142,6 +146,7 @@ public interface MultiMap<K, V> extends IterableMap<K, Object> {
      * @throws ClassCastException if the key is of an invalid type
      * @throws NullPointerException if the key is null and null keys are invalid
      */
+    @Override
     Object remove(Object key); // Cannot use remove(K key) as that does not properly implement Map#remove
 
     /**
@@ -153,6 +158,7 @@ public interface MultiMap<K, V> extends IterableMap<K, Object> {
      *
      * @return a collection view of the values contained in this map
      */
+    @Override
     Collection<Object> values();
 
 }
diff --git a/src/main/java/org/apache/commons/collections4/OrderedBidiMap.java b/src/main/java/org/apache/commons/collections4/OrderedBidiMap.java
index 9d46685..4ac89ba 100644
--- a/src/main/java/org/apache/commons/collections4/OrderedBidiMap.java
+++ b/src/main/java/org/apache/commons/collections4/OrderedBidiMap.java
@@ -46,6 +46,7 @@ public interface OrderedBidiMap<K, V> extends BidiMap<K, V>, OrderedMap<K, V> {
      *
      * @return an inverted bidirectional map
      */
+    @Override
     OrderedBidiMap<V, K> inverseBidiMap();
 
 }
diff --git a/src/main/java/org/apache/commons/collections4/OrderedMap.java b/src/main/java/org/apache/commons/collections4/OrderedMap.java
index 6fedf89..492b7c8 100644
--- a/src/main/java/org/apache/commons/collections4/OrderedMap.java
+++ b/src/main/java/org/apache/commons/collections4/OrderedMap.java
@@ -36,6 +36,7 @@ public interface OrderedMap<K, V> extends IterableMap<K, V> {
      *
      * @return a map iterator
      */
+    @Override
     OrderedMapIterator<K, V> mapIterator();
 
     /**
diff --git a/src/main/java/org/apache/commons/collections4/OrderedMapIterator.java b/src/main/java/org/apache/commons/collections4/OrderedMapIterator.java
index 5f22f5d..23c747c 100644
--- a/src/main/java/org/apache/commons/collections4/OrderedMapIterator.java
+++ b/src/main/java/org/apache/commons/collections4/OrderedMapIterator.java
@@ -33,6 +33,7 @@ public interface OrderedMapIterator<K, V> extends MapIterator<K, V>, OrderedIter
      *
      * @return <code>true</code> if the iterator has a previous element
      */
+    @Override
     boolean hasPrevious();
 
     /**
@@ -41,6 +42,7 @@ public interface OrderedMapIterator<K, V> extends MapIterator<K, V>, OrderedIter
      * @return the previous key in the iteration
      * @throws java.util.NoSuchElementException if the iteration is finished
      */
+    @Override
     K previous();
 
 }
diff --git a/src/main/java/org/apache/commons/collections4/SortedBidiMap.java b/src/main/java/org/apache/commons/collections4/SortedBidiMap.java
index 8b71860..178090c 100644
--- a/src/main/java/org/apache/commons/collections4/SortedBidiMap.java
+++ b/src/main/java/org/apache/commons/collections4/SortedBidiMap.java
@@ -48,6 +48,7 @@ public interface SortedBidiMap<K, V> extends OrderedBidiMap<K, V>, SortedMap<K,
      *
      * @return an inverted bidirectional map
      */
+    @Override
     SortedBidiMap<V, K> inverseBidiMap();
 
     /**
diff --git a/src/main/java/org/apache/commons/collections4/SplitMapUtils.java b/src/main/java/org/apache/commons/collections4/SplitMapUtils.java
index 7b27ed6..d6822df 100644
--- a/src/main/java/org/apache/commons/collections4/SplitMapUtils.java
+++ b/src/main/java/org/apache/commons/collections4/SplitMapUtils.java
@@ -52,18 +52,22 @@ public class SplitMapUtils {
             this.get = get;
         }
 
+        @Override
         public void clear() {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public boolean containsKey(final Object key) {
             return get.containsKey(key);
         }
 
+        @Override
         public boolean containsValue(final Object value) {
             return get.containsValue(value);
         }
 
+        @Override
         public Set<Map.Entry<K, V>> entrySet() {
             return UnmodifiableEntrySet.unmodifiableEntrySet(get.entrySet());
         }
@@ -76,6 +80,7 @@ public class SplitMapUtils {
             return arg0 instanceof WrappedGet && ((WrappedGet<?, ?>) arg0).get.equals(this.get);
         }
 
+        @Override
         public V get(final Object key) {
             return get.get(key);
         }
@@ -85,34 +90,42 @@ public class SplitMapUtils {
             return ("WrappedGet".hashCode() << 4) | get.hashCode();
         }
 
+        @Override
         public boolean isEmpty() {
             return get.isEmpty();
         }
 
+        @Override
         public Set<K> keySet() {
             return UnmodifiableSet.unmodifiableSet(get.keySet());
         }
 
+        @Override
         public V put(final K key, final V value) {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public void putAll(final Map<? extends K, ? extends V> t) {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public V remove(final Object key) {
             return get.remove(key);
         }
 
+        @Override
         public int size() {
             return get.size();
         }
 
+        @Override
         public Collection<V> values() {
             return UnmodifiableCollection.unmodifiableCollection(get.values());
         }
 
+        @Override
         public MapIterator<K, V> mapIterator() {
             MapIterator<K, V> it;
             if (get instanceof IterableGet) {
@@ -131,18 +144,22 @@ public class SplitMapUtils {
             this.put = put;
         }
 
+        @Override
         public void clear() {
             put.clear();
         }
 
+        @Override
         public boolean containsKey(final Object key) {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public boolean containsValue(final Object value) {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public Set<Map.Entry<K, V>> entrySet() {
             throw new UnsupportedOperationException();
         }
@@ -155,6 +172,7 @@ public class SplitMapUtils {
             return obj instanceof WrappedPut && ((WrappedPut<?, ?>) obj).put.equals(this.put);
         }
 
+        @Override
         public V get(final Object key) {
             throw new UnsupportedOperationException();
         }
@@ -164,31 +182,38 @@ public class SplitMapUtils {
             return ("WrappedPut".hashCode() << 4) | put.hashCode();
         }
 
+        @Override
         public boolean isEmpty() {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public Set<K> keySet() {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         @SuppressWarnings("unchecked")
         public V put(final K key, final V value) {
             return (V) put.put(key, value);
         }
 
+        @Override
         public void putAll(final Map<? extends K, ? extends V> t) {
             put.putAll(t);
         }
 
+        @Override
         public V remove(final Object key) {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public int size() {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public Collection<V> values() {
             throw new UnsupportedOperationException();
         }
diff --git a/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java b/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java
index a2efd16..e9f43b9 100644
--- a/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java
+++ b/src/main/java/org/apache/commons/collections4/comparators/ComparatorChain.java
@@ -161,7 +161,7 @@ public class ComparatorChain<E> implements Comparator<E>, Serializable {
      *
      * @param index      index of the Comparator to replace
      * @param comparator Comparator to place at the given index
-     * @exception IndexOutOfBoundsException
+     * @throws IndexOutOfBoundsException
      *                   if index &lt; 0 or index &gt;= size()
      */
     public void setComparator(final int index, final Comparator<E> comparator) throws IndexOutOfBoundsException {
diff --git a/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java b/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java
index d852883..f9a4d7d 100644
--- a/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java
+++ b/src/main/java/org/apache/commons/collections4/comparators/FixedOrderComparator.java
@@ -214,7 +214,7 @@ public class FixedOrderComparator<T> implements Comparator<T>, Serializable {
      * Compares two objects according to the order of this Comparator.
      * <p>
      * It is important to note that this class will throw an IllegalArgumentException
-     * in the case of an unrecognised object. This is not specified in the
+     * in the case of an unrecognized object. This is not specified in the
      * Comparator interface, but is the most appropriate exception.
      *
      * @param obj1  the first object to compare
diff --git a/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java b/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java
index 2c7c5a6..2111c34 100644
--- a/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java
+++ b/src/main/java/org/apache/commons/collections4/comparators/NullComparator.java
@@ -66,7 +66,7 @@ public class NullComparator<E> implements Comparator<E>, Serializable {
      *  non-<code>null</code> objects.  This argument cannot be
      *  <code>null</code>
      *
-     *  @exception NullPointerException if <code>nonNullComparator</code> is
+     *  @throws NullPointerException if <code>nonNullComparator</code> is
      *  <code>null</code>
      **/
     public NullComparator(final Comparator<? super E> nonNullComparator) {
@@ -106,7 +106,7 @@ public class NullComparator<E> implements Comparator<E>, Serializable {
      *  that <code>null</code> should be compared as lower than a
      *  non-<code>null</code> object.
      *
-     *  @exception NullPointerException if <code>nonNullComparator</code> is
+     *  @throws NullPointerException if <code>nonNullComparator</code> is
      *  <code>null</code>
      **/
     public NullComparator(final Comparator<? super E> nonNullComparator, final boolean nullsAreHigh) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java b/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java
index d183161..3fdb0fd 100644
--- a/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/AbstractQuantifierPredicate.java
@@ -49,6 +49,7 @@ public abstract class AbstractQuantifierPredicate<T> implements PredicateDecorat
      * @return a copy of the predicates
      * @since 3.1
      */
+    @Override
     public Predicate<? super T>[] getPredicates() {
         return FunctorUtils.<T>copy(iPredicates);
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java b/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java
index 8345648..583e347 100644
--- a/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/AllPredicate.java
@@ -103,6 +103,7 @@ public final class AllPredicate<T> extends AbstractQuantifierPredicate<T> {
      * @param object  the input object
      * @return true if all decorated predicates return true
      */
+    @Override
     public boolean evaluate(final T object) {
         for (final Predicate<? super T> iPredicate : iPredicates) {
             if (!iPredicate.evaluate(object)) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java b/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java
index fa333e1..96b5ed8 100644
--- a/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/AndPredicate.java
@@ -72,6 +72,7 @@ public final class AndPredicate<T> implements PredicateDecorator<T>, Serializabl
      * @param object  the input object
      * @return true if both decorated predicates return true
      */
+    @Override
     public boolean evaluate(final T object) {
        return iPredicate1.evaluate(object) && iPredicate2.evaluate(object);
     }
@@ -82,6 +83,7 @@ public final class AndPredicate<T> implements PredicateDecorator<T>, Serializabl
      * @return the predicates
      * @since 3.1
      */
+    @Override
     @SuppressWarnings("unchecked")
     public Predicate<? super T>[] getPredicates() {
         return new Predicate[] {iPredicate1, iPredicate2};
diff --git a/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java b/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java
index 1d825e6..95a0dd1 100644
--- a/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/AnyPredicate.java
@@ -100,6 +100,7 @@ public final class AnyPredicate<T> extends AbstractQuantifierPredicate<T> {
      * @param object  the input object
      * @return true if any decorated predicate return true
      */
+    @Override
     public boolean evaluate(final T object) {
         for (final Predicate<? super T> iPredicate : iPredicates) {
             if (iPredicate.evaluate(object)) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/CatchAndRethrowClosure.java b/src/main/java/org/apache/commons/collections4/functors/CatchAndRethrowClosure.java
index 05190e3..38b7fe2 100644
--- a/src/main/java/org/apache/commons/collections4/functors/CatchAndRethrowClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/CatchAndRethrowClosure.java
@@ -36,7 +36,7 @@ import org.apache.commons.collections4.FunctorException;
  * // use catch and re-throw closure
  * java.util.List<String> strList = // some list
  * try {
- *     CollctionUtils.forAllDo(strList, writer);
+ *     CollectionUtils.forAllDo(strList, writer);
  * } catch (FunctorException ex) {
  *     Throwable originalError = ex.getCause();
  *     // handle error
@@ -55,6 +55,7 @@ public abstract class CatchAndRethrowClosure<E> implements Closure<E> {
      * @throws FunctorException (runtime) if the closure execution resulted in a
      *             checked exception.
      */
+    @Override
     public void execute(final E input) {
         try {
             executeAndThrow(input);
diff --git a/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java b/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java
index 96497eb..326383c 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedClosure.java
@@ -107,6 +107,7 @@ public class ChainedClosure<E> implements Closure<E>, Serializable {
      *
      * @param input  the input object passed to each closure
      */
+    @Override
     public void execute(final E input) {
         for (final Closure<? super E> iClosure : iClosures) {
             iClosure.execute(input);
diff --git a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java
index 0f925b2..1c07dfa 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ChainedTransformer.java
@@ -108,6 +108,7 @@ public class ChainedTransformer<T> implements Transformer<T, T>, Serializable {
      * @param object  the input object passed to the first transformer
      * @return the transformed result
      */
+    @Override
     public T transform(T object) {
         for (final Transformer<? super T, ? extends T> iTransformer : iTransformers) {
             object = iTransformer.transform(object);
diff --git a/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java b/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java
index fbe92b7..9e640e9 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ClosureTransformer.java
@@ -68,6 +68,7 @@ public class ClosureTransformer<T> implements Transformer<T, T>, Serializable {
      * @param input  the input object to transform
      * @return the transformed result
      */
+    @Override
     public T transform(final T input) {
         iClosure.execute(input);
         return input;
diff --git a/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java b/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java
index e6ea395..4c4a7ec 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ComparatorPredicate.java
@@ -162,6 +162,7 @@ public class ComparatorPredicate<T> implements Predicate<T>, Serializable {
      * @return {@code true} if the comparison succeeds according to the selected criterion
      * @throws IllegalStateException if the criterion is invalid (really not possible)
      */
+    @Override
     public boolean evaluate(final T target) {
 
         boolean result = false;
diff --git a/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java b/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java
index 76a4579..4a0f91a 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ConstantFactory.java
@@ -73,6 +73,7 @@ public class ConstantFactory<T> implements Factory<T>, Serializable {
      *
      * @return the stored constant value
      */
+    @Override
     public T create() {
         return iConstant;
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java b/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java
index bc3c4d9..03fdc7b 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ConstantTransformer.java
@@ -86,6 +86,7 @@ public class ConstantTransformer<I, O> implements Transformer<I, O>, Serializabl
      * @param input  the input object which is ignored
      * @return the stored constant
      */
+    @Override
     public O transform(final I input) {
         return iConstant;
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/DefaultEquator.java b/src/main/java/org/apache/commons/collections4/functors/DefaultEquator.java
index 1111e2e..d49db44 100644
--- a/src/main/java/org/apache/commons/collections4/functors/DefaultEquator.java
+++ b/src/main/java/org/apache/commons/collections4/functors/DefaultEquator.java
@@ -62,6 +62,7 @@ public class DefaultEquator<T> implements Equator<T>, Serializable {
     /**
      * {@inheritDoc} Delegates to {@link Object#equals(Object)}.
      */
+    @Override
     public boolean equate(final T o1, final T o2) {
         return o1 == o2 || o1 != null && o1.equals(o2);
     }
@@ -72,6 +73,7 @@ public class DefaultEquator<T> implements Equator<T>, Serializable {
      * @return <code>o.hashCode()</code> if <code>o</code> is non-
      *         <code>null</code>, else {@link #HASHCODE_NULL}.
      */
+    @Override
     public int hash(final T o) {
         return o == null ? HASHCODE_NULL : o.hashCode();
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java b/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java
index 813aec6..d4a51b0 100644
--- a/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/EqualPredicate.java
@@ -101,6 +101,7 @@ public final class EqualPredicate<T> implements Predicate<T>, Serializable {
      * @param object  the input object
      * @return true if input object equals stored value
      */
+    @Override
     public boolean evaluate(final T object) {
         if (equator != null) {
             return equator.equate(iValue, object);
diff --git a/src/main/java/org/apache/commons/collections4/functors/ExceptionClosure.java b/src/main/java/org/apache/commons/collections4/functors/ExceptionClosure.java
index 87bfbde..fa1bce8 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ExceptionClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ExceptionClosure.java
@@ -61,6 +61,7 @@ public final class ExceptionClosure<E> implements Closure<E>, Serializable {
      * @param input  the input object
      * @throws FunctorException always
      */
+    @Override
     public void execute(final E input) {
         throw new FunctorException("ExceptionClosure invoked");
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/ExceptionFactory.java b/src/main/java/org/apache/commons/collections4/functors/ExceptionFactory.java
index 7889f92..fe71fa5 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ExceptionFactory.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ExceptionFactory.java
@@ -61,6 +61,7 @@ public final class ExceptionFactory<T> implements Factory<T>, Serializable {
      * @return never
      * @throws FunctorException always
      */
+    @Override
     public T create() {
         throw new FunctorException("ExceptionFactory invoked");
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/ExceptionPredicate.java b/src/main/java/org/apache/commons/collections4/functors/ExceptionPredicate.java
index d899c4a..c5b668d 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ExceptionPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ExceptionPredicate.java
@@ -62,6 +62,7 @@ public final class ExceptionPredicate<T> implements Predicate<T>, Serializable {
      * @return never
      * @throws FunctorException always
      */
+    @Override
     public boolean evaluate(final T object) {
         throw new FunctorException("ExceptionPredicate invoked");
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/ExceptionTransformer.java b/src/main/java/org/apache/commons/collections4/functors/ExceptionTransformer.java
index e7658a1..51269c7 100644
--- a/src/main/java/org/apache/commons/collections4/functors/ExceptionTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/ExceptionTransformer.java
@@ -63,6 +63,7 @@ public final class ExceptionTransformer<I, O> implements Transformer<I, O>, Seri
      * @return never
      * @throws FunctorException always
      */
+    @Override
     public O transform(final I input) {
         throw new FunctorException("ExceptionTransformer invoked");
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java b/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java
index b820707..cf8a5d1 100644
--- a/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/FactoryTransformer.java
@@ -69,6 +69,7 @@ public class FactoryTransformer<I, O> implements Transformer<I, O>, Serializable
      * @param input  the input object to transform
      * @return the transformed result
      */
+    @Override
     public O transform(final I input) {
         return iFactory.create();
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/FalsePredicate.java b/src/main/java/org/apache/commons/collections4/functors/FalsePredicate.java
index 0053793..388deee 100644
--- a/src/main/java/org/apache/commons/collections4/functors/FalsePredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/FalsePredicate.java
@@ -60,6 +60,7 @@ public final class FalsePredicate<T> implements Predicate<T>, Serializable {
      * @param object  the input object
      * @return false always
      */
+    @Override
     public boolean evaluate(final T object) {
         return false;
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java b/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java
index abb4645..369e5c9 100644
--- a/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/IdentityPredicate.java
@@ -67,6 +67,7 @@ public final class IdentityPredicate<T> implements Predicate<T>, Serializable {
      * @param object  the input object
      * @return true if input is the same object as the stored value
      */
+    @Override
     public boolean evaluate(final T object) {
         return iValue == object;
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/IfClosure.java b/src/main/java/org/apache/commons/collections4/functors/IfClosure.java
index 19a5e60..895a766 100644
--- a/src/main/java/org/apache/commons/collections4/functors/IfClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/IfClosure.java
@@ -115,6 +115,7 @@ public class IfClosure<E> implements Closure<E>, Serializable {
      *
      * @param input  the input object
      */
+    @Override
     public void execute(final E input) {
         if (iPredicate.evaluate(input)) {
             iTrueClosure.execute(input);
diff --git a/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java b/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java
index 431f3e0..933e53e 100644
--- a/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/IfTransformer.java
@@ -117,6 +117,7 @@ public class IfTransformer<I, O> implements Transformer<I, O>, Serializable {
      * @param input  the input object to transform
      * @return the transformed result
      */
+    @Override
     public O transform(final I input) {
         if(iPredicate.evaluate(input)){
             return iTrueTransformer.transform(input);
diff --git a/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java b/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java
index 6577d83..3976410 100644
--- a/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/InstanceofPredicate.java
@@ -66,6 +66,7 @@ public final class InstanceofPredicate implements Predicate<Object>, Serializabl
      * @param object  the input object
      * @return true if input is of stored type
      */
+    @Override
     public boolean evaluate(final Object object) {
         return iType.isInstance(object);
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/MapTransformer.java b/src/main/java/org/apache/commons/collections4/functors/MapTransformer.java
index eb02a5c..cfcbc10 100644
--- a/src/main/java/org/apache/commons/collections4/functors/MapTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/MapTransformer.java
@@ -70,6 +70,7 @@ public final class MapTransformer<I, O> implements Transformer<I, O>, Serializab
      * @param input  the input object to transform
      * @return the transformed result
      */
+    @Override
     public O transform(final I input) {
         return iMap.get(input);
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/NOPClosure.java b/src/main/java/org/apache/commons/collections4/functors/NOPClosure.java
index de9447a..9e68898 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NOPClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NOPClosure.java
@@ -59,6 +59,7 @@ public final class NOPClosure<E> implements Closure<E>, Serializable {
      *
      * @param input  the input object
      */
+    @Override
     public void execute(final E input) {
         // do nothing
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/NOPTransformer.java b/src/main/java/org/apache/commons/collections4/functors/NOPTransformer.java
index 3d831eb..13e3fbe 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NOPTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NOPTransformer.java
@@ -60,6 +60,7 @@ public class NOPTransformer<T> implements Transformer<T, T>, Serializable {
      * @param input  the input object to transform
      * @return the transformed result which is the input
      */
+    @Override
     public T transform(final T input) {
         return input;
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java b/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java
index 617f2e3..7539a57 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NonePredicate.java
@@ -90,6 +90,7 @@ public final class NonePredicate<T> extends AbstractQuantifierPredicate<T> {
      * @param object  the input object
      * @return true if none of decorated predicates return true
      */
+    @Override
     public boolean evaluate(final T object) {
         for (final Predicate<? super T> iPredicate : iPredicates) {
             if (iPredicate.evaluate(object)) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/NotNullPredicate.java b/src/main/java/org/apache/commons/collections4/functors/NotNullPredicate.java
index 5697cfb..f06b275 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NotNullPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NotNullPredicate.java
@@ -60,6 +60,7 @@ public final class NotNullPredicate<T> implements Predicate<T>, Serializable {
      * @param object  the object to evaluate
      * @return true if not null
      */
+    @Override
     public boolean evaluate(final T object) {
         return object != null;
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java b/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java
index b9876a0..bd3f257 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NotPredicate.java
@@ -66,6 +66,7 @@ public final class NotPredicate<T> implements PredicateDecorator<T>, Serializabl
      * @param object  the input object
      * @return true if predicate returns false
      */
+    @Override
     public boolean evaluate(final T object) {
         return !iPredicate.evaluate(object);
     }
@@ -76,6 +77,7 @@ public final class NotPredicate<T> implements PredicateDecorator<T>, Serializabl
      * @return the predicate as the only element in an array
      * @since 3.1
      */
+    @Override
     @SuppressWarnings("unchecked")
     public Predicate<? super T>[] getPredicates() {
         return new Predicate[] {iPredicate};
diff --git a/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java b/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java
index aa090ee..8fdba9b 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NullIsExceptionPredicate.java
@@ -69,6 +69,7 @@ public final class NullIsExceptionPredicate<T> implements PredicateDecorator<T>,
      * @return true if decorated predicate returns true
      * @throws FunctorException if input is null
      */
+    @Override
     public boolean evaluate(final T object) {
         if (object == null) {
             throw new FunctorException("Input Object must not be null");
@@ -82,6 +83,7 @@ public final class NullIsExceptionPredicate<T> implements PredicateDecorator<T>,
      * @return the predicate as the only element in an array
      * @since 3.1
      */
+    @Override
     @SuppressWarnings("unchecked")
     public Predicate<? super T>[] getPredicates() {
         return new Predicate[] { iPredicate };
diff --git a/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java b/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java
index c24878b..20195c1 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NullIsFalsePredicate.java
@@ -67,6 +67,7 @@ public final class NullIsFalsePredicate<T> implements PredicateDecorator<T>, Ser
      * @param object  the input object
      * @return true if decorated predicate returns true, false if input is null
      */
+    @Override
     public boolean evaluate(final T object) {
         if (object == null) {
             return false;
@@ -80,6 +81,7 @@ public final class NullIsFalsePredicate<T> implements PredicateDecorator<T>, Ser
      * @return the predicate as the only element in an array
      * @since 3.1
      */
+    @Override
     @SuppressWarnings("unchecked")
     public Predicate<? super T>[] getPredicates() {
         return new Predicate[] { iPredicate };
diff --git a/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java b/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java
index 1eac13f..34ce9c2 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NullIsTruePredicate.java
@@ -67,6 +67,7 @@ public final class NullIsTruePredicate<T> implements PredicateDecorator<T>, Seri
      * @param object  the input object
      * @return true if decorated predicate returns true or input is null
      */
+    @Override
     public boolean evaluate(final T object) {
         if (object == null) {
             return true;
@@ -80,6 +81,7 @@ public final class NullIsTruePredicate<T> implements PredicateDecorator<T>, Seri
      * @return the predicate as the only element in an array
      * @since 3.1
      */
+    @Override
     @SuppressWarnings("unchecked")
     public Predicate<? super T>[] getPredicates() {
         return new Predicate[] { iPredicate };
diff --git a/src/main/java/org/apache/commons/collections4/functors/NullPredicate.java b/src/main/java/org/apache/commons/collections4/functors/NullPredicate.java
index 097b431..354b04c 100644
--- a/src/main/java/org/apache/commons/collections4/functors/NullPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/NullPredicate.java
@@ -60,6 +60,7 @@ public final class NullPredicate<T> implements Predicate<T>, Serializable {
      * @param object  the input object
      * @return true if input is null
      */
+    @Override
     public boolean evaluate(final T object) {
         return object == null;
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java b/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java
index c4588d5..cb829f0 100644
--- a/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/OnePredicate.java
@@ -91,6 +91,7 @@ public final class OnePredicate<T> extends AbstractQuantifierPredicate<T> {
      * @param object  the input object
      * @return true if only one decorated predicate returns true
      */
+    @Override
     public boolean evaluate(final T object) {
         boolean match = false;
         for (final Predicate<? super T> iPredicate : iPredicates) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java b/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java
index dcd1992..6078191 100644
--- a/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/OrPredicate.java
@@ -72,6 +72,7 @@ public final class OrPredicate<T> implements PredicateDecorator<T>, Serializable
      * @param object  the input object
      * @return true if either decorated predicate returns true
      */
+    @Override
     public boolean evaluate(final T object) {
        return iPredicate1.evaluate(object) || iPredicate2.evaluate(object);
     }
@@ -82,6 +83,7 @@ public final class OrPredicate<T> implements PredicateDecorator<T>, Serializable
      * @return the predicates
      * @since 3.1
      */
+    @Override
     @SuppressWarnings("unchecked")
     public Predicate<? super T>[] getPredicates() {
         return new Predicate[] {iPredicate1, iPredicate2};
diff --git a/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java b/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java
index 61c6325..5abda00 100644
--- a/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/PredicateTransformer.java
@@ -68,6 +68,7 @@ public class PredicateTransformer<T> implements Transformer<T, Boolean>, Seriali
      * @param input  the input object to transform
      * @return the transformed result
      */
+    @Override
     public Boolean transform(final T input) {
         return Boolean.valueOf(iPredicate.evaluate(input));
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/StringValueTransformer.java b/src/main/java/org/apache/commons/collections4/functors/StringValueTransformer.java
index 078f53f..3749db1 100644
--- a/src/main/java/org/apache/commons/collections4/functors/StringValueTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/StringValueTransformer.java
@@ -60,6 +60,7 @@ public final class StringValueTransformer<T> implements Transformer<T, String>,
      * @param input  the input object to transform
      * @return the transformed result
      */
+    @Override
     public String transform(final T input) {
         return String.valueOf(input);
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java b/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java
index de6e544..39fe371 100644
--- a/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/SwitchClosure.java
@@ -143,6 +143,7 @@ public class SwitchClosure<E> implements Closure<E>, Serializable {
      *
      * @param input  the input object
      */
+    @Override
     public void execute(final E input) {
         for (int i = 0; i < iPredicates.length; i++) {
             if (iPredicates[i].evaluate(input) == true) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java b/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java
index defc3fe..6d8c97a 100644
--- a/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java
+++ b/src/main/java/org/apache/commons/collections4/functors/SwitchTransformer.java
@@ -157,6 +157,7 @@ public class SwitchTransformer<I, O> implements Transformer<I, O>, Serializable
      * @param input  the input object to transform
      * @return the transformed result
      */
+    @Override
     public O transform(final I input) {
         for (int i = 0; i < iPredicates.length; i++) {
             if (iPredicates[i].evaluate(input) == true) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java b/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java
index 2278a26..c91e8df 100644
--- a/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/TransformedPredicate.java
@@ -79,6 +79,7 @@ public final class TransformedPredicate<T> implements PredicateDecorator<T>, Ser
      * @param object  the input object which will be transformed
      * @return true if decorated predicate returns true
      */
+    @Override
     public boolean evaluate(final T object) {
         final T result = iTransformer.transform(object);
         return iPredicate.evaluate(result);
@@ -90,6 +91,7 @@ public final class TransformedPredicate<T> implements PredicateDecorator<T>, Ser
      * @return the predicate as the only element in an array
      * @since 3.1
      */
+    @Override
     @SuppressWarnings("unchecked")
     public Predicate<? super T>[] getPredicates() {
         return new Predicate[] {iPredicate};
diff --git a/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java b/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java
index f3430ec..f75e9c6 100644
--- a/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java
+++ b/src/main/java/org/apache/commons/collections4/functors/TransformerClosure.java
@@ -68,6 +68,7 @@ public class TransformerClosure<E> implements Closure<E>, Serializable {
      *
      * @param input  the input object
      */
+    @Override
     public void execute(final E input) {
         iTransformer.transform(input);
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java b/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java
index c3b03a2..f5ed6ba 100644
--- a/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/TransformerPredicate.java
@@ -69,6 +69,7 @@ public final class TransformerPredicate<T> implements Predicate<T>, Serializable
      * @return true if decorated transformer returns Boolean.TRUE
      * @throws FunctorException if the transformer returns an invalid type
      */
+    @Override
     public boolean evaluate(final T object) {
         final Boolean result = iTransformer.transform(object);
         if (result == null) {
diff --git a/src/main/java/org/apache/commons/collections4/functors/TruePredicate.java b/src/main/java/org/apache/commons/collections4/functors/TruePredicate.java
index 61b6563..fb56a91 100644
--- a/src/main/java/org/apache/commons/collections4/functors/TruePredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/TruePredicate.java
@@ -60,6 +60,7 @@ public final class TruePredicate<T> implements Predicate<T>, Serializable {
      * @param object  the input object
      * @return true always
      */
+    @Override
     public boolean evaluate(final T object) {
         return true;
     }
diff --git a/src/main/java/org/apache/commons/collections4/functors/UniquePredicate.java b/src/main/java/org/apache/commons/collections4/functors/UniquePredicate.java
index fa64339..50528ad 100644
--- a/src/main/java/org/apache/commons/collections4/functors/UniquePredicate.java
+++ b/src/main/java/org/apache/commons/collections4/functors/UniquePredicate.java
@@ -63,6 +63,7 @@ public final class UniquePredicate<T> implements Predicate<T>, Serializable {
      * @param object  the input object
      * @return true if this is the first time the object is seen
      */
+    @Override
     public boolean evaluate(final T object) {
         return iSet.add(object);
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java b/src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java
index 5aa7117..8f2e6bc 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractIteratorDecorator.java
@@ -40,6 +40,7 @@ public abstract class AbstractIteratorDecorator<E> extends AbstractUntypedIterat
     }
 
     /** {@inheritDoc} */
+    @Override
     public E next() {
         return getIterator().next();
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java b/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java
index f380383..cefe7c7 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractListIteratorDecorator.java
@@ -58,46 +58,55 @@ public class AbstractListIteratorDecorator<E> implements ListIterator<E> {
     //-----------------------------------------------------------------------
 
     /** {@inheritDoc} */
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
 
     /** {@inheritDoc} */
+    @Override
     public E next() {
         return iterator.next();
     }
 
     /** {@inheritDoc} */
+    @Override
     public int nextIndex() {
         return iterator.nextIndex();
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean hasPrevious() {
         return iterator.hasPrevious();
     }
 
     /** {@inheritDoc} */
+    @Override
     public E previous() {
         return iterator.previous();
     }
 
     /** {@inheritDoc} */
+    @Override
     public int previousIndex() {
         return iterator.previousIndex();
     }
 
     /** {@inheritDoc} */
+    @Override
     public void remove() {
         iterator.remove();
     }
 
     /** {@inheritDoc} */
+    @Override
     public void set(final E obj) {
         iterator.set(obj);
     }
 
     /** {@inheritDoc} */
+    @Override
     public void add(final E obj) {
         iterator.add(obj);
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java b/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java
index 34d23f9..13343e8 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractMapIteratorDecorator.java
@@ -58,31 +58,37 @@ public class AbstractMapIteratorDecorator<K, V> implements MapIterator<K, V> {
     //-----------------------------------------------------------------------
 
     /** {@inheritDoc} */
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
 
     /** {@inheritDoc} */
+    @Override
     public K next() {
         return iterator.next();
     }
 
     /** {@inheritDoc} */
+    @Override
     public void remove() {
         iterator.remove();
     }
 
     /** {@inheritDoc} */
+    @Override
     public K getKey() {
         return iterator.getKey();
     }
 
     /** {@inheritDoc} */
+    @Override
     public V getValue() {
         return iterator.getValue();
     }
 
     /** {@inheritDoc} */
+    @Override
     public V setValue(final V obj) {
         return iterator.setValue(obj);
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java b/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java
index 2118b8e..c934f46 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractOrderedMapIteratorDecorator.java
@@ -58,41 +58,49 @@ public class AbstractOrderedMapIteratorDecorator<K, V> implements OrderedMapIter
     //-----------------------------------------------------------------------
 
     /** {@inheritDoc} */
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
 
     /** {@inheritDoc} */
+    @Override
     public K next() {
         return iterator.next();
     }
 
     /** {@inheritDoc} */
+    @Override
     public boolean hasPrevious() {
         return iterator.hasPrevious();
     }
 
     /** {@inheritDoc} */
+    @Override
     public K previous() {
         return iterator.previous();
     }
 
     /** {@inheritDoc} */
+    @Override
     public void remove() {
         iterator.remove();
     }
 
     /** {@inheritDoc} */
+    @Override
     public K getKey() {
         return iterator.getKey();
     }
 
     /** {@inheritDoc} */
+    @Override
     public V getValue() {
         return iterator.getValue();
     }
 
     /** {@inheritDoc} */
+    @Override
     public V setValue(final V obj) {
         return iterator.setValue(obj);
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java b/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java
index 250bf2a..200e7b7 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/AbstractUntypedIteratorDecorator.java
@@ -55,10 +55,12 @@ public abstract class AbstractUntypedIteratorDecorator<I, O> implements Iterator
         return iterator;
     }
 
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
 
+    @Override
     public void remove() {
         iterator.remove();
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java
index a7bc59e..a6e7831 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayIterator.java
@@ -32,6 +32,7 @@ import org.apache.commons.collections4.ResettableIterator;
  * The iterator implements a {@link #reset} method, allowing the reset of
  * the iterator back to the start if required.
  *
+ * @param <E> the type of elements returned by this iterator
  * @since 1.0
  * @version $Id$
  */
@@ -131,6 +132,7 @@ public class ArrayIterator<E> implements ResettableIterator<E> {
      *
      * @return true if there is a next element to return
      */
+    @Override
     public boolean hasNext() {
         return index < endIndex;
     }
@@ -142,6 +144,7 @@ public class ArrayIterator<E> implements ResettableIterator<E> {
      * @throws NoSuchElementException if all the elements in the array
      *  have already been returned
      */
+    @Override
     @SuppressWarnings("unchecked")
     public E next() {
         if (hasNext() == false) {
@@ -155,6 +158,7 @@ public class ArrayIterator<E> implements ResettableIterator<E> {
      *
      * @throws UnsupportedOperationException always
      */
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("remove() method is not supported");
     }
@@ -193,6 +197,7 @@ public class ArrayIterator<E> implements ResettableIterator<E> {
     /**
      * Resets the iterator back to the start index.
      */
+    @Override
     public void reset() {
         this.index = this.startIndex;
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java
index 56f33e4..b5307d6 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ArrayListIterator.java
@@ -101,6 +101,7 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
      *
      * @return true if there is a previous element to return
      */
+    @Override
     public boolean hasPrevious() {
         return this.index > this.startIndex;
     }
@@ -111,6 +112,7 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
      * @return the previous element
      * @throws NoSuchElementException if there is no previous element
      */
+    @Override
     @SuppressWarnings("unchecked")
     public E previous() {
         if (hasPrevious() == false) {
@@ -141,6 +143,7 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
      *
      * @return the index of the item to be retrieved next
      */
+    @Override
     public int nextIndex() {
         return this.index - this.startIndex;
     }
@@ -150,6 +153,7 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
      *
      * @return the index of the item to be retrieved next
      */
+    @Override
     public int previousIndex() {
         return this.index - this.startIndex - 1;
     }
@@ -162,6 +166,7 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
      * @throws UnsupportedOperationException always thrown.
      * @see java.util.ListIterator#set
      */
+    @Override
     public void add(final Object o) {
         throw new UnsupportedOperationException("add() method is not supported");
     }
@@ -184,6 +189,7 @@ public class ArrayListIterator<E> extends ArrayIterator<E>
      * before {@link #set(Object)}
      * @see java.util.ListIterator#set
      */
+    @Override
     public void set(final Object o) {
         if (this.lastItemIndex == -1) {
             throw new IllegalStateException("must call next() or previous() before a call to set()");
diff --git a/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java b/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java
index 8a5025c..06aaeff 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/BoundedIterator.java
@@ -90,6 +90,7 @@ public class BoundedIterator<E> implements Iterator<E> {
 
     //-----------------------------------------------------------------------
 
+    @Override
     public boolean hasNext() {
         if (!checkBounds()) {
             return false;
@@ -108,6 +109,7 @@ public class BoundedIterator<E> implements Iterator<E> {
         return true;
     }
 
+    @Override
     public E next() {
         if (!checkBounds()) {
             throw new NoSuchElementException();
@@ -125,6 +127,7 @@ public class BoundedIterator<E> implements Iterator<E> {
      * {@link IllegalStateException} if no explicit call to {@link #next()} has been made prior
      * to calling {@link #remove()}.
      */
+    @Override
     public void remove() {
         if (pos <= offset) {
             throw new IllegalStateException("remove() can not be called before calling next()");
diff --git a/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java b/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java
index e699d60..3e5aebb 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/CollatingIterator.java
@@ -227,6 +227,7 @@ public class CollatingIterator<E> implements Iterator<E> {
      *
      * @return true if this iterator has remaining elements
      */
+    @Override
     public boolean hasNext() {
         start();
         return anyValueSet(valueSet) || anyHasNext(iterators);
@@ -238,6 +239,7 @@ public class CollatingIterator<E> implements Iterator<E> {
      * @return the next ordered element
      * @throws NoSuchElementException if no child iterator has any more elements
      */
+    @Override
     public E next() throws NoSuchElementException {
         if (hasNext() == false) {
             throw new NoSuchElementException();
@@ -258,6 +260,7 @@ public class CollatingIterator<E> implements Iterator<E> {
      * @throws IllegalStateException if there is no last returned element, or if
      * the last returned element has already been removed
      */
+    @Override
     public void remove() {
         if (lastReturned == -1) {
             throw new IllegalStateException("No value can be removed at present");
diff --git a/src/main/java/org/apache/commons/collections4/iterators/EntrySetMapIterator.java b/src/main/java/org/apache/commons/collections4/iterators/EntrySetMapIterator.java
index fc3841b..7a17f6c 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/EntrySetMapIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/EntrySetMapIterator.java
@@ -61,6 +61,7 @@ public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableI
      *
      * @return <code>true</code> if the iterator has more elements
      */
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
@@ -71,6 +72,7 @@ public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableI
      * @return the next key in the iteration
      * @throws java.util.NoSuchElementException if the iteration is finished
      */
+    @Override
     public K next() {
         last = iterator.next();
         canRemove = true;
@@ -88,6 +90,7 @@ public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableI
      * @throws IllegalStateException if <code>remove()</code> has already been called
      *  since the last call to <code>next()</code>
      */
+    @Override
     public void remove() {
         if (canRemove == false) {
             throw new IllegalStateException("Iterator remove() can only be called once after next()");
@@ -105,6 +108,7 @@ public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableI
      * @return the current key
      * @throws IllegalStateException if <code>next()</code> has not yet been called
      */
+    @Override
     public K getKey() {
         if (last == null) {
             throw new IllegalStateException("Iterator getKey() can only be called after next() and before remove()");
@@ -119,6 +123,7 @@ public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableI
      * @return the current value
      * @throws IllegalStateException if <code>next()</code> has not yet been called
      */
+    @Override
     public V getValue() {
         if (last == null) {
             throw new IllegalStateException("Iterator getValue() can only be called after next() and before remove()");
@@ -136,6 +141,7 @@ public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableI
      * @throws IllegalStateException if <code>remove()</code> has been called since the
      *  last call to <code>next()</code>
      */
+    @Override
     public V setValue(final V value) {
         if (last == null) {
             throw new IllegalStateException("Iterator setValue() can only be called after next() and before remove()");
@@ -147,6 +153,7 @@ public class EntrySetMapIterator<K, V> implements MapIterator<K, V>, ResettableI
     /**
      * Resets the state of the iterator.
      */
+    @Override
     public void reset() {
         iterator = map.entrySet().iterator();
         last = null;
diff --git a/src/main/java/org/apache/commons/collections4/iterators/EnumerationIterator.java b/src/main/java/org/apache/commons/collections4/iterators/EnumerationIterator.java
index 00d20c0..4933eae 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/EnumerationIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/EnumerationIterator.java
@@ -78,6 +78,7 @@ public class EnumerationIterator<E> implements Iterator<E> {
      * @return true if the underlying enumeration has more elements
      * @throws NullPointerException  if the underlying enumeration is null
      */
+    @Override
     public boolean hasNext() {
         return enumeration.hasMoreElements();
     }
@@ -88,6 +89,7 @@ public class EnumerationIterator<E> implements Iterator<E> {
      * @return the next object from the enumeration
      * @throws NullPointerException if the enumeration is null
      */
+    @Override
     public E next() {
         last = enumeration.nextElement();
         return last;
@@ -100,9 +102,10 @@ public class EnumerationIterator<E> implements Iterator<E> {
      * If so, the first occurrence of the last returned object from this
      * iterator will be removed from the collection.
      *
-     * @exception IllegalStateException <code>next()</code> not called.
-     * @exception UnsupportedOperationException if no associated collection
+     * @throws IllegalStateException <code>next()</code> not called.
+     * @throws UnsupportedOperationException if no associated collection
      */
+    @Override
     public void remove() {
         if (collection != null) {
             if (last != null) {
diff --git a/src/main/java/org/apache/commons/collections4/iterators/FilterIterator.java b/src/main/java/org/apache/commons/collections4/iterators/FilterIterator.java
index 53aa08a..1769557 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/FilterIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/FilterIterator.java
@@ -82,6 +82,7 @@ public class FilterIterator<E> implements Iterator<E> {
      * @return true if there is another object that matches the predicate
      * @throws NullPointerException if either the iterator or predicate are null
      */
+    @Override
     public boolean hasNext() {
         return nextObjectSet || setNextObject();
     }
@@ -94,6 +95,7 @@ public class FilterIterator<E> implements Iterator<E> {
      * @throws NoSuchElementException if there are no more elements that
      *  match the predicate
      */
+    @Override
     public E next() {
         if (!nextObjectSet) {
             if (!setNextObject()) {
@@ -115,6 +117,7 @@ public class FilterIterator<E> implements Iterator<E> {
      * @throws IllegalStateException if <code>hasNext()</code> has already
      *  been called.
      */
+    @Override
     public void remove() {
         if (nextObjectSet) {
             throw new IllegalStateException("remove() cannot be called");
diff --git a/src/main/java/org/apache/commons/collections4/iterators/FilterListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/FilterListIterator.java
index 7e5855f..6bd0e43 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/FilterListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/FilterListIterator.java
@@ -113,18 +113,22 @@ public class FilterListIterator<E> implements ListIterator<E> {
 
     //-----------------------------------------------------------------------
     /** Not supported. */
+    @Override
     public void add(final E o) {
         throw new UnsupportedOperationException("FilterListIterator.add(Object) is not supported.");
     }
 
+    @Override
     public boolean hasNext() {
         return nextObjectSet || setNextObject();
     }
 
+    @Override
     public boolean hasPrevious() {
         return previousObjectSet || setPreviousObject();
     }
 
+    @Override
     public E next() {
         if (!nextObjectSet) {
             if (!setNextObject()) {
@@ -137,10 +141,12 @@ public class FilterListIterator<E> implements ListIterator<E> {
         return temp;
     }
 
+    @Override
     public int nextIndex() {
         return nextIndex;
     }
 
+    @Override
     public E previous() {
         if (!previousObjectSet) {
             if (!setPreviousObject()) {
@@ -153,16 +159,19 @@ public class FilterListIterator<E> implements ListIterator<E> {
         return temp;
     }
 
+    @Override
     public int previousIndex() {
         return nextIndex-1;
     }
 
     /** Not supported. */
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("FilterListIterator.remove() is not supported.");
     }
 
     /** Not supported. */
+    @Override
     public void set(final E o) {
         throw new UnsupportedOperationException("FilterListIterator.set(Object) is not supported.");
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java b/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java
index c703f07..2f86245 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorChain.java
@@ -231,6 +231,7 @@ public class IteratorChain<E> implements Iterator<E> {
      *
      * @return true if elements remain
      */
+    @Override
     public boolean hasNext() {
         lockChain();
         updateCurrentIterator();
@@ -246,6 +247,7 @@ public class IteratorChain<E> implements Iterator<E> {
      * @throws java.util.NoSuchElementException if all the Iterators are
      * exhausted
      */
+    @Override
     public E next() {
         lockChain();
         updateCurrentIterator();
@@ -267,6 +269,7 @@ public class IteratorChain<E> implements Iterator<E> {
      * or the remove method has already been called after the last call to the
      * next method.
      */
+    @Override
     public void remove() {
         lockChain();
         if (currentIterator == null) {
diff --git a/src/main/java/org/apache/commons/collections4/iterators/IteratorEnumeration.java b/src/main/java/org/apache/commons/collections4/iterators/IteratorEnumeration.java
index b098346..5ee573b 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorEnumeration.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorEnumeration.java
@@ -56,6 +56,7 @@ public class IteratorEnumeration<E> implements Enumeration<E> {
      *
      * @return true if the underlying iterator has more elements
      */
+    @Override
     public boolean hasMoreElements() {
         return iterator.hasNext();
     }
@@ -67,6 +68,7 @@ public class IteratorEnumeration<E> implements Enumeration<E> {
      * @throws java.util.NoSuchElementException if the underlying iterator has
      * no more elements
      */
+    @Override
     public E nextElement() {
         return iterator.next();
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java b/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java
index 7212002..be1261b 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/IteratorIterable.java
@@ -68,14 +68,17 @@ public class IteratorIterable<E> implements Iterable<E> {
      */
     private static <E> Iterator<E> createTypesafeIterator(final Iterator<? extends E> iterator) {
         return new Iterator<E>() {
+            @Override
             public boolean hasNext() {
                 return iterator.hasNext();
             }
 
+            @Override
             public E next() {
                 return iterator.next();
             }
 
+            @Override
             public void remove() {
                 iterator.remove();
             }
@@ -120,6 +123,7 @@ public class IteratorIterable<E> implements Iterable<E> {
      *
      * @return the iterator
      */
+    @Override
     public Iterator<E> iterator() {
         if (iterator instanceof ResettableIterator) {
             ((ResettableIterator<? extends E>)iterator).reset();
diff --git a/src/main/java/org/apache/commons/collections4/iterators/LazyIteratorChain.java b/src/main/java/org/apache/commons/collections4/iterators/LazyIteratorChain.java
index b412492..f7fe023 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/LazyIteratorChain.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/LazyIteratorChain.java
@@ -108,6 +108,7 @@ public abstract class LazyIteratorChain<E> implements Iterator<E> {
      *
      * @return true if elements remain
      */
+    @Override
     public boolean hasNext() {
         updateCurrentIterator();
         lastUsedIterator = currentIterator;
@@ -121,6 +122,7 @@ public abstract class LazyIteratorChain<E> implements Iterator<E> {
      * @return element from the current Iterator
      * @throws java.util.NoSuchElementException if all the Iterators are exhausted
      */
+    @Override
     public E next() {
         updateCurrentIterator();
         lastUsedIterator = currentIterator;
@@ -140,6 +142,7 @@ public abstract class LazyIteratorChain<E> implements Iterator<E> {
      * @throws IllegalStateException if the next method has not yet been called,
      *   or the remove method has already been called after the last call to the next method.
      */
+    @Override
     public void remove() {
         if (currentIterator == null) {
             updateCurrentIterator();
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java b/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java
index 7764f83..54afd31 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ListIteratorWrapper.java
@@ -93,6 +93,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      * @throws UnsupportedOperationException if the underlying iterator is not of
      * type {@link ListIterator}
      */
+    @Override
     public void add(final E obj) throws UnsupportedOperationException {
         if (iterator instanceof ListIterator) {
             @SuppressWarnings("unchecked")
@@ -108,6 +109,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      *
      * @return true if there are more elements
      */
+    @Override
     public boolean hasNext() {
         if (currentIndex == wrappedIteratorIndex || iterator instanceof ListIterator) {
             return iterator.hasNext();
@@ -120,6 +122,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      *
      * @return true if there are previous elements
      */
+    @Override
     public boolean hasPrevious() {
         if (iterator instanceof ListIterator) {
             final ListIterator<?> li = (ListIterator<?>) iterator;
@@ -134,6 +137,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      * @return the next element from the iterator
      * @throws NoSuchElementException if there are no more elements
      */
+    @Override
     public E next() throws NoSuchElementException {
         if (iterator instanceof ListIterator) {
             return iterator.next();
@@ -157,6 +161,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      *
      * @return the index of the next element
      */
+    @Override
     public int nextIndex() {
         if (iterator instanceof ListIterator) {
             final ListIterator<?> li = (ListIterator<?>) iterator;
@@ -171,6 +176,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      * @return the previous element
      * @throws NoSuchElementException  if there are no previous elements
      */
+    @Override
     public E previous() throws NoSuchElementException {
         if (iterator instanceof ListIterator) {
             @SuppressWarnings("unchecked")
@@ -190,6 +196,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      *
      * @return  the index of the previous element
      */
+    @Override
     public int previousIndex() {
         if (iterator instanceof ListIterator) {
             final ListIterator<?> li = (ListIterator<?>) iterator;
@@ -203,6 +210,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      *
      * @throws UnsupportedOperationException always
      */
+    @Override
     public void remove() throws UnsupportedOperationException {
         if (iterator instanceof ListIterator) {
             iterator.remove();
@@ -230,6 +238,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      * @throws UnsupportedOperationException if the underlying iterator is not of
      * type {@link ListIterator}
      */
+    @Override
     public void set(final E obj) throws UnsupportedOperationException {
         if (iterator instanceof ListIterator) {
             @SuppressWarnings("unchecked")
@@ -248,6 +257,7 @@ public class ListIteratorWrapper<E> implements ResettableListIterator<E> {
      *
      * @since 3.2
      */
+    @Override
     public void reset()  {
         if (iterator instanceof ListIterator) {
             final ListIterator<?> li = (ListIterator<?>) iterator;
diff --git a/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java b/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java
index f0c9bc2..58720c8 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/LoopingIterator.java
@@ -67,6 +67,7 @@ public class LoopingIterator<E> implements ResettableIterator<E> {
      *
      * @return <code>true</code> if there are more elements
      */
+    @Override
     public boolean hasNext() {
         return collection.size() > 0;
     }
@@ -80,6 +81,7 @@ public class LoopingIterator<E> implements ResettableIterator<E> {
      * @throws NoSuchElementException if there are no elements
      *         at all.  Use {@link #hasNext} to avoid this error.
      */
+    @Override
     public E next() {
         if (collection.size() == 0) {
             throw new NoSuchElementException("There are no elements for this iterator to loop on");
@@ -102,6 +104,7 @@ public class LoopingIterator<E> implements ResettableIterator<E> {
      * next has been performed. If the {@link #reset} is called, then remove may
      * not be called until {@link #next} is called again.
      */
+    @Override
     public void remove() {
         iterator.remove();
     }
@@ -109,6 +112,7 @@ public class LoopingIterator<E> implements ResettableIterator<E> {
     /**
      * Resets the iterator back to the start of the collection.
      */
+    @Override
     public void reset() {
         iterator = collection.iterator();
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java
index 3b2af7e..f079238 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/LoopingListIterator.java
@@ -70,6 +70,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      *
      * @return <code>true</code> if there are more elements
      */
+    @Override
     public boolean hasNext() {
         return !list.isEmpty();
     }
@@ -82,6 +83,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      * @return the object after the last element returned
      * @throws NoSuchElementException if there are no elements in the list
      */
+    @Override
     public E next() {
         if (list.isEmpty()) {
             throw new NoSuchElementException(
@@ -104,6 +106,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      * @return the index of the element that would be returned if next() were called
      * @throws NoSuchElementException if there are no elements in the list
      */
+    @Override
     public int nextIndex() {
         if (list.isEmpty()) {
             throw new NoSuchElementException(
@@ -123,6 +126,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      *
      * @return <code>true</code> if there are more elements
      */
+    @Override
     public boolean hasPrevious() {
         return !list.isEmpty();
     }
@@ -136,6 +140,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      * @return the object before the last element returned
      * @throws NoSuchElementException if there are no elements in the list
      */
+    @Override
     public E previous() {
         if (list.isEmpty()) {
             throw new NoSuchElementException(
@@ -163,6 +168,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      * @return the index of the element that would be returned if previous() were called
      * @throws NoSuchElementException if there are no elements in the list
      */
+    @Override
     public int previousIndex() {
         if (list.isEmpty()) {
             throw new NoSuchElementException(
@@ -192,6 +198,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      * not supported by the iterator implementation of the underlying
      * list
      */
+    @Override
     public void remove() {
         iterator.remove();
     }
@@ -211,6 +218,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      * @throws UnsupportedOperationException if the add method is not
      *  supported by the iterator implementation of the underlying list
      */
+    @Override
     public void add(final E obj) {
         iterator.add(obj);
     }
@@ -227,6 +235,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
      * @throws UnsupportedOperationException if the set method is not
      *  supported by the iterator implementation of the underlying list
      */
+    @Override
     public void set(final E obj) {
         iterator.set(obj);
     }
@@ -234,6 +243,7 @@ public class LoopingListIterator<E> implements ResettableListIterator<E> {
     /**
      * Resets the iterator back to the start of the list.
      */
+    @Override
     public void reset() {
         _reset();
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java
index d88ce0d..ea37d5e 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/NodeListIterator.java
@@ -66,10 +66,12 @@ public class NodeListIterator implements Iterator<Node> {
         this.nodeList = nodeList;
     }
 
+    @Override
     public boolean hasNext() {
         return nodeList == null ? false : index < nodeList.getLength();
     }
 
+    @Override
     public Node next() {
         if (nodeList != null && index < nodeList.getLength()) {
             return nodeList.item(index++);
@@ -82,6 +84,7 @@ public class NodeListIterator implements Iterator<Node> {
      *
      * @throws UnsupportedOperationException always
      */
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("remove() method not supported for a NodeListIterator.");
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java
index 474d4ba..6163e0f 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayIterator.java
@@ -21,7 +21,7 @@ import java.util.NoSuchElementException;
 import org.apache.commons.collections4.ResettableIterator;
 
 /**
- * An {@link Iterator} over an array of objects.
+ * An {@link java.util.Iterator Iterator} over an array of objects.
  * <p>
  * This iterator does not support {@link #remove}, as the object array cannot be
  * structurally modified.
@@ -29,6 +29,7 @@ import org.apache.commons.collections4.ResettableIterator;
  * The iterator implements a {@link #reset} method, allowing the reset of the iterator
  * back to the start if required.
  *
+ * @param <E> the type to iterate over
  * @since 3.0
  * @version $Id$
  */
@@ -107,6 +108,7 @@ public class ObjectArrayIterator<E> implements ResettableIterator<E> {
      *
      * @return true if there is a next element to return
      */
+    @Override
     public boolean hasNext() {
         return this.index < this.endIndex;
     }
@@ -118,6 +120,7 @@ public class ObjectArrayIterator<E> implements ResettableIterator<E> {
      * @throws NoSuchElementException if all the elements in the array
      *    have already been returned
      */
+    @Override
     public E next() {
         if (hasNext() == false) {
             throw new NoSuchElementException();
@@ -130,6 +133,7 @@ public class ObjectArrayIterator<E> implements ResettableIterator<E> {
      *
      * @throws UnsupportedOperationException always
      */
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("remove() method is not supported for an ObjectArrayIterator");
     }
@@ -167,6 +171,7 @@ public class ObjectArrayIterator<E> implements ResettableIterator<E> {
     /**
      * Resets the iterator back to the start index.
      */
+    @Override
     public void reset() {
         this.index = this.startIndex;
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java
index 7d6f696..b107f6e 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectArrayListIterator.java
@@ -95,6 +95,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      *
      * @return true if there is a previous element to return
      */
+    @Override
     public boolean hasPrevious() {
         return this.index > getStartIndex();
     }
@@ -105,6 +106,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      * @return the previous element
      * @throws NoSuchElementException if there is no previous element
      */
+    @Override
     public E previous() {
         if (hasPrevious() == false) {
             throw new NoSuchElementException();
@@ -133,6 +135,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      *
      * @return the index of the item to be retrieved next
      */
+    @Override
     public int nextIndex() {
         return this.index - getStartIndex();
     }
@@ -142,6 +145,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      *
      * @return the index of the item to be retrieved next
      */
+    @Override
     public int previousIndex() {
         return this.index - getStartIndex() - 1;
     }
@@ -153,6 +157,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      * @param obj  the object to add
      * @throws UnsupportedOperationException always thrown.
      */
+    @Override
     public void add(final E obj) {
         throw new UnsupportedOperationException("add() method is not supported");
     }
@@ -174,6 +179,7 @@ public class ObjectArrayListIterator<E> extends ObjectArrayIterator<E>
      * @throws IllegalStateException if next() has not yet been called.
      * @throws ClassCastException if the object type is unsuitable for the array
      */
+    @Override
     public void set(final E obj) {
         if (this.lastItemIndex == -1) {
             throw new IllegalStateException("must call next() or previous() before a call to set()");
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java
index a05d2f1..1b98f1c 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ObjectGraphIterator.java
@@ -205,6 +205,7 @@ public class ObjectGraphIterator<E> implements Iterator<E> {
      *
      * @return true if elements remain in the iteration
      */
+    @Override
     public boolean hasNext() {
         updateCurrentIterator();
         return hasNext;
@@ -216,6 +217,7 @@ public class ObjectGraphIterator<E> implements Iterator<E> {
      * @return the next element from the iteration
      * @throws NoSuchElementException if all the Iterators are exhausted
      */
+    @Override
     public E next() {
         updateCurrentIterator();
         if (hasNext == false) {
@@ -241,6 +243,7 @@ public class ObjectGraphIterator<E> implements Iterator<E> {
      *   if the next method has not yet been called, or the remove method has
      *   already been called after the last call to the next method.
      */
+    @Override
     public void remove() {
         if (lastUsedIterator == null) {
             throw new IllegalStateException("Iterator remove() cannot be called at this time");
diff --git a/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java b/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java
index 7ccb96a..56d2dd9 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/PeekingIterator.java
@@ -93,6 +93,7 @@ public class PeekingIterator<E> implements Iterator<E> {
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public boolean hasNext() {
         if (exhausted) {
             return false;
@@ -132,6 +133,7 @@ public class PeekingIterator<E> implements Iterator<E> {
         return slot;
     }
 
+    @Override
     public E next() {
         if (!hasNext()) {
             throw new NoSuchElementException();
@@ -149,6 +151,7 @@ public class PeekingIterator<E> implements Iterator<E> {
      * @throws IllegalStateException if {@link #peek()} or {@link #element()} has been called
      *   prior to the call to {@link #remove()}
      */
+    @Override
     public void remove() {
         if (slotFilled) {
             throw new IllegalStateException("peek() or element() called before remove()");
diff --git a/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java b/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java
index 9b2b3d5..456a3fd 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/PermutationIterator.java
@@ -46,12 +46,12 @@ public class PermutationIterator<E> implements Iterator<List<E>> {
     /**
      * Permutation is done on theses keys to handle equal objects.
      */
-    private int[] keys;
+    private final int[] keys;
 
     /**
      * Mapping between keys and objects.
      */
-    private Map<Integer, E> objectMap;
+    private final Map<Integer, E> objectMap;
 
     /**
      * Direction table used in the algorithm:
@@ -60,7 +60,7 @@ public class PermutationIterator<E> implements Iterator<List<E>> {
      *   <li>true is right</li>
      * </ul>
      */
-    private boolean[] direction;
+    private final boolean[] direction;
 
     /**
      * Next permutation to return. When a permutation is requested
@@ -95,6 +95,7 @@ public class PermutationIterator<E> implements Iterator<List<E>> {
      * Indicates if there are more permutation available.
      * @return true if there are more permutations, otherwise false
      */
+    @Override
     public boolean hasNext() {
         return nextPermutation != null;
     }
@@ -104,6 +105,7 @@ public class PermutationIterator<E> implements Iterator<List<E>> {
      * @return a list of the permutator's elements representing a permutation
      * @throws NoSuchElementException if there are no more permutations
      */
+    @Override
     public List<E> next() {
         if (!hasNext()) {
             throw new NoSuchElementException();
@@ -149,6 +151,7 @@ public class PermutationIterator<E> implements Iterator<List<E>> {
         return result;
     }
 
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("remove() is not supported");
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java b/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java
index 1039014..7d19627 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/PushbackIterator.java
@@ -39,7 +39,7 @@ public class PushbackIterator<E> implements Iterator<E> {
     private final Iterator<? extends E> iterator;
 
     /** The LIFO queue containing the pushed back items. */
-    private Deque<E> items = new ArrayDeque<E>();
+    private final Deque<E> items = new ArrayDeque<E>();
 
     //-----------------------------------------------------------------------
     /**
@@ -87,10 +87,12 @@ public class PushbackIterator<E> implements Iterator<E> {
         items.push(item);
     }
 
+    @Override
     public boolean hasNext() {
         return !items.isEmpty() ? true : iterator.hasNext();
     }
 
+    @Override
     public E next() {
         return !items.isEmpty() ? items.pop() : iterator.next();
     }
@@ -100,6 +102,7 @@ public class PushbackIterator<E> implements Iterator<E> {
      *
      * @throws UnsupportedOperationException always
      */
+    @Override
     public void remove() {
         throw new UnsupportedOperationException();
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java
index e4529e9..d5f192a 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ReverseListIterator.java
@@ -66,6 +66,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      *
      * @return true if there is another element
      */
+    @Override
     public boolean hasNext() {
         return iterator.hasPrevious();
     }
@@ -76,6 +77,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      *
      * @return the next element in the iterator
      */
+    @Override
     public E next() {
         final E obj = iterator.previous();
         validForUpdate = true;
@@ -87,6 +89,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      *
      * @return the index of the next element in the iterator
      */
+    @Override
     public int nextIndex() {
         return iterator.previousIndex();
     }
@@ -96,6 +99,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      *
      * @return true if there is a previous element
      */
+    @Override
     public boolean hasPrevious() {
         return iterator.hasNext();
     }
@@ -106,6 +110,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      *
      * @return the previous element in the iterator
      */
+    @Override
     public E previous() {
         final E obj = iterator.next();
         validForUpdate = true;
@@ -117,6 +122,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      *
      * @return the index of the previous element in the iterator
      */
+    @Override
     public int previousIndex() {
         return iterator.nextIndex();
     }
@@ -127,6 +133,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      * @throws UnsupportedOperationException if the list is unmodifiable
      * @throws IllegalStateException if there is no element to remove
      */
+    @Override
     public void remove() {
         if (validForUpdate == false) {
             throw new IllegalStateException("Cannot remove from list until next() or previous() called");
@@ -141,6 +148,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      * @throws UnsupportedOperationException if the list is unmodifiable
      * @throws IllegalStateException if the iterator is not in a valid state for set
      */
+    @Override
     public void set(final E obj) {
         if (validForUpdate == false) {
             throw new IllegalStateException("Cannot set to list until next() or previous() called");
@@ -155,6 +163,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      * @throws UnsupportedOperationException if the list is unmodifiable
      * @throws IllegalStateException if the iterator is not in a valid state for set
      */
+    @Override
     public void add(final E obj) {
         // the validForUpdate flag is needed as the necessary previous()
         // method call re-enables remove and add
@@ -170,6 +179,7 @@ public class ReverseListIterator<E> implements ResettableListIterator<E> {
      * Resets the iterator back to the start (which is the
      * end of the list as this is a reversed iterator)
      */
+    @Override
     public void reset() {
         iterator = list.listIterator(list.size());
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/SingletonIterator.java b/src/main/java/org/apache/commons/collections4/iterators/SingletonIterator.java
index 4426ba8..df15e8b 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/SingletonIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/SingletonIterator.java
@@ -71,6 +71,7 @@ public class SingletonIterator<E>
      *
      * @return true if the single object hasn't been returned yet
      */
+    @Override
     public boolean hasNext() {
         return beforeFirst && !removed;
     }
@@ -84,6 +85,7 @@ public class SingletonIterator<E>
      * @throws NoSuchElementException if the single object has already
      *    been returned
      */
+    @Override
     public E next() {
         if (!beforeFirst || removed) {
             throw new NoSuchElementException();
@@ -101,6 +103,7 @@ public class SingletonIterator<E>
      *        method.
      * @throws UnsupportedOperationException if remove is not supported
      */
+    @Override
     public void remove() {
         if (removeAllowed) {
             if (removed || beforeFirst) {
@@ -116,6 +119,7 @@ public class SingletonIterator<E>
     /**
      * Reset the iterator to the start.
      */
+    @Override
     public void reset() {
         beforeFirst = true;
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/SingletonListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/SingletonListIterator.java
index 9b6c27f..5dab9b8 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/SingletonListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/SingletonListIterator.java
@@ -51,6 +51,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      *
      * @return true if the single object hasn't been returned yet
      */
+    @Override
     public boolean hasNext() {
         return beforeFirst && !removed;
     }
@@ -62,6 +63,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      *
      * @return true if the single object has been returned
      */
+    @Override
     public boolean hasPrevious() {
         return !beforeFirst && !removed;
     }
@@ -72,6 +74,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      *
      * @return 0 or 1 depending on current state.
      */
+    @Override
     public int nextIndex() {
         return beforeFirst ? 0 : 1;
     }
@@ -83,6 +86,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      *
      * @return 0 or -1 depending on current state.
      */
+    @Override
     public int previousIndex() {
         return beforeFirst ? -1 : 0;
     }
@@ -96,6 +100,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      * @throws NoSuchElementException if the single object has already
      *    been returned
      */
+    @Override
     public E next() {
         if (!beforeFirst || removed) {
             throw new NoSuchElementException();
@@ -114,6 +119,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      * @throws NoSuchElementException if the single object has not already
      *    been returned
      */
+    @Override
     public E previous() {
         if (beforeFirst || removed) {
             throw new NoSuchElementException();
@@ -129,6 +135,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      *        has already been called after the last call to {@code next}
      *        or {@code previous}.
      */
+    @Override
     public void remove() {
         if(!nextCalled || removed) {
             throw new IllegalStateException();
@@ -143,6 +150,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      * @param obj  the object to add
      * @throws UnsupportedOperationException always
      */
+    @Override
     public void add(final E obj) {
         throw new UnsupportedOperationException("add() is not supported by this iterator");
     }
@@ -154,6 +162,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
      * @throws IllegalStateException if {@code next} has not been called
      *          or the object has been removed
      */
+    @Override
     public void set(final E obj) {
         if (!nextCalled || removed) {
             throw new IllegalStateException();
@@ -164,6 +173,7 @@ public class SingletonListIterator<E> implements ResettableListIterator<E> {
     /**
      * Reset the iterator back to the start.
      */
+    @Override
     public void reset() {
         beforeFirst = true;
         nextCalled = false;
diff --git a/src/main/java/org/apache/commons/collections4/iterators/TransformIterator.java b/src/main/java/org/apache/commons/collections4/iterators/TransformIterator.java
index 47e2ad3..09efade 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/TransformIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/TransformIterator.java
@@ -70,6 +70,7 @@ public class TransformIterator<I, O> implements Iterator<O> {
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
@@ -82,10 +83,12 @@ public class TransformIterator<I, O> implements Iterator<O> {
      * @return the next object
      * @throws java.util.NoSuchElementException if there are no more elements
      */
+    @Override
     public O next() {
         return transform(iterator.next());
     }
 
+    @Override
     public void remove() {
         iterator.remove();
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java
index d6d566d..bee6d25 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableIterator.java
@@ -68,14 +68,17 @@ public final class UnmodifiableIterator<E> implements Iterator<E>, Unmodifiable
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
 
+    @Override
     public E next() {
         return iterator.next();
     }
 
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("remove() is not supported");
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java
index 7e33595..6861fd9 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableListIterator.java
@@ -66,38 +66,47 @@ public final class UnmodifiableListIterator<E> implements ListIterator<E>, Unmod
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
 
+    @Override
     public E next() {
         return iterator.next();
     }
 
+    @Override
     public int nextIndex() {
         return iterator.nextIndex();
     }
 
+    @Override
     public boolean hasPrevious() {
         return iterator.hasPrevious();
     }
 
+    @Override
     public E previous() {
         return iterator.previous();
     }
 
+    @Override
     public int previousIndex() {
         return iterator.previousIndex();
     }
 
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("remove() is not supported");
     }
 
+    @Override
     public void set(final E obj) {
         throw new UnsupportedOperationException("set() is not supported");
     }
 
+    @Override
     public void add(final E obj) {
         throw new UnsupportedOperationException("add() is not supported");
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java
index 659c9b1..154fd8a 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableMapIterator.java
@@ -67,26 +67,32 @@ public final class UnmodifiableMapIterator<K, V> implements MapIterator<K, V>, U
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
 
+    @Override
     public K next() {
         return iterator.next();
     }
 
+    @Override
     public K getKey() {
         return iterator.getKey();
     }
 
+    @Override
     public V getValue() {
         return iterator.getValue();
     }
 
+    @Override
     public V setValue(final V value) {
         throw new UnsupportedOperationException("setValue() is not supported");
     }
 
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("remove() is not supported");
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java
index 263a53b..52421e7 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/UnmodifiableOrderedMapIterator.java
@@ -69,34 +69,42 @@ public final class UnmodifiableOrderedMapIterator<K, V> implements OrderedMapIte
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
 
+    @Override
     public K next() {
         return iterator.next();
     }
 
+    @Override
     public boolean hasPrevious() {
         return iterator.hasPrevious();
     }
 
+    @Override
     public K previous() {
         return iterator.previous();
     }
 
+    @Override
     public K getKey() {
         return iterator.getKey();
     }
 
+    @Override
     public V getValue() {
         return iterator.getValue();
     }
 
+    @Override
     public V setValue(final V value) {
         throw new UnsupportedOperationException("setValue() is not supported");
     }
 
+    @Override
     public void remove() {
         throw new UnsupportedOperationException("remove() is not supported");
     }
diff --git a/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java b/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java
index 8937f3f..4558498 100644
--- a/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java
+++ b/src/main/java/org/apache/commons/collections4/iterators/ZippingIterator.java
@@ -104,6 +104,7 @@ public class ZippingIterator<E> implements Iterator<E> {
      *
      * @return true if this iterator has remaining elements
      */
+    @Override
     public boolean hasNext() {
         // the next iterator has already been determined
         // this might happen if hasNext() is called multiple
@@ -130,6 +131,7 @@ public class ZippingIterator<E> implements Iterator<E> {
      * @return the next interleaved element
      * @throws NoSuchElementException if no child iterator has any more elements
      */
+    @Override
     public E next() throws NoSuchElementException {
         if (!hasNext()) {
             throw new NoSuchElementException();
@@ -147,6 +149,7 @@ public class ZippingIterator<E> implements Iterator<E> {
      * @throws IllegalStateException if there is no last returned element, or if
      *   the last returned element has already been removed
      */
+    @Override
     public void remove() {
         if (lastReturned == null) {
             throw new IllegalStateException("No value can be removed at present");
diff --git a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java
index 02c8864..f8e3329 100644
--- a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java
+++ b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractKeyValue.java
@@ -49,6 +49,7 @@ public abstract class AbstractKeyValue<K, V> implements KeyValue<K, V> {
      *
      * @return the key
      */
+    @Override
     public K getKey() {
         return key;
     }
@@ -64,6 +65,7 @@ public abstract class AbstractKeyValue<K, V> implements KeyValue<K, V> {
      *
      * @return the value
      */
+    @Override
     public V getValue() {
         return value;
     }
diff --git a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java
index 72ee5ac..dc7def2 100644
--- a/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/keyvalue/AbstractMapEntryDecorator.java
@@ -56,14 +56,17 @@ public abstract class AbstractMapEntryDecorator<K, V> implements Map.Entry<K, V>
 
     //-----------------------------------------------------------------------
 
+    @Override
     public K getKey() {
         return entry.getKey();
     }
 
+    @Override
     public V getValue() {
         return entry.getValue();
     }
 
+    @Override
     public V setValue(final V object) {
         return entry.setValue(object);
     }
diff --git a/src/main/java/org/apache/commons/collections4/keyvalue/TiedMapEntry.java b/src/main/java/org/apache/commons/collections4/keyvalue/TiedMapEntry.java
index a585ac8..613d3f3 100644
--- a/src/main/java/org/apache/commons/collections4/keyvalue/TiedMapEntry.java
+++ b/src/main/java/org/apache/commons/collections4/keyvalue/TiedMapEntry.java
@@ -60,6 +60,7 @@ public class TiedMapEntry<K, V> implements Map.Entry<K, V>, KeyValue<K, V>, Seri
      *
      * @return the key
      */
+    @Override
     public K getKey() {
         return key;
     }
@@ -69,6 +70,7 @@ public class TiedMapEntry<K, V> implements Map.Entry<K, V>, KeyValue<K, V>, Seri
      *
      * @return the value
      */
+    @Override
     public V getValue() {
         return map.get(key);
     }
@@ -80,6 +82,7 @@ public class TiedMapEntry<K, V> implements Map.Entry<K, V>, KeyValue<K, V>, Seri
      * @return the old value
      * @throws IllegalArgumentException if the value is set to this map entry
      */
+    @Override
     public V setValue(final V value) {
         if (value == this) {
             throw new IllegalArgumentException("Cannot set value to this map entry");
diff --git a/src/main/java/org/apache/commons/collections4/list/AbstractLinkedList.java b/src/main/java/org/apache/commons/collections4/list/AbstractLinkedList.java
index 9e80e07..2d3ea0d 100644
--- a/src/main/java/org/apache/commons/collections4/list/AbstractLinkedList.java
+++ b/src/main/java/org/apache/commons/collections4/list/AbstractLinkedList.java
@@ -100,14 +100,17 @@ public abstract class AbstractLinkedList<E> implements List<E> {
 
     //-----------------------------------------------------------------------
 
+    @Override
     public int size() {
         return size;
     }
 
+    @Override
     public boolean isEmpty() {
         return size() == 0;
     }
 
+    @Override
     public E get(final int index) {
         final Node<E> node = getNode(index, false);
         return node.getValue();
@@ -115,20 +118,24 @@ public abstract class AbstractLinkedList<E> implements List<E> {
 
     //-----------------------------------------------------------------------
 
+    @Override
     public Iterator<E> iterator() {
         return listIterator();
     }
 
+    @Override
     public ListIterator<E> listIterator() {
         return new LinkedListIterator<E>(this, 0);
     }
 
+    @Override
     public ListIterator<E> listIterator(final int fromIndex) {
         return new LinkedListIterator<E>(this, fromIndex);
     }
 
     //-----------------------------------------------------------------------
 
+    @Override
     public int indexOf(final Object value) {
         int i = 0;
         for (Node<E> node = header.next; node != header; node = node.next) {
@@ -140,6 +147,7 @@ public abstract class AbstractLinkedList<E> implements List<E> {
         return -1;
     }
 
+    @Override
     public int lastIndexOf(final Object value) {
         int i = size - 1;
         for (Node<E> node = header.previous; node != header; node = node.previous) {
@@ -151,10 +159,12 @@ public abstract class AbstractLinkedList<E> implements List<E> {
         return -1;
     }
 
+    @Override
     public boolean contains(final Object value) {
         return indexOf(value) != -1;
     }
 
+    @Override
     public boolean containsAll(final Collection<?> coll) {
         for (final Object o : coll) {
             if (!contains(o)) {
@@ -166,10 +176,12 @@ public abstract class AbstractLinkedList<E> implements List<E> {
 
     //-----------------------------------------------------------------------
 
+    @Override
     public Object[] toArray() {
         return toArray(new Object[size]);
     }
 
+    @Override
     @SuppressWarnings("unchecked")
     public <T> T[] toArray(T[] array) {
         // Extend the array if needed
@@ -196,26 +208,31 @@ public abstract class AbstractLinkedList<E> implements List<E> {
      * @param toIndexExclusive  the index to end at
      * @return the new sublist
      */
+    @Override
     public List<E> subList(final int fromIndexInclusive, final int toIndexExclusive) {
         return new LinkedSubList<E>(this, fromIndexInclusive, toIndexExclusive);
     }
 
     //-----------------------------------------------------------------------
 
+    @Override
     public boolean add(final E value) {
         addLast(value);
         return true;
     }
 
+    @Override
     public void add(final int index, final E value) {
         final Node<E> node = getNode(index, true);
         addNodeBefore(node, value);
     }
 
+    @Override
     public boolean addAll(final Collection<? extends E> coll) {
         return addAll(size, coll);
     }
 
+    @Override
     public boolean addAll(final int index, final Collection<? extends E> coll) {
         final Node<E> node = getNode(index, true);
         for (final E e : coll) {
@@ -226,6 +243,7 @@ public abstract class AbstractLinkedList<E> implements List<E> {
 
     //-----------------------------------------------------------------------
 
+    @Override
     public E remove(final int index) {
         final Node<E> node = getNode(index, false);
         final E oldValue = node.getValue();
@@ -233,6 +251,7 @@ public abstract class AbstractLinkedList<E> implements List<E> {
         return oldValue;
     }
 
+    @Override
     public boolean remove(final Object value) {
         for (Node<E> node = header.next; node != header; node = node.next) {
             if (isEqualValue(node.getValue(), value)) {
@@ -252,6 +271,7 @@ public abstract class AbstractLinkedList<E> implements List<E> {
      * <code>coll</code> that provides a fast (e.g. O(1)) implementation of
      * {@link Collection#contains(Object)}.
      */
+    @Override
     public boolean removeAll(final Collection<?> coll) {
         boolean modified = false;
         final Iterator<E> it = iterator();
@@ -275,6 +295,7 @@ public abstract class AbstractLinkedList<E> implements List<E> {
      * <code>coll</code> that provides a fast (e.g. O(1)) implementation of
      * {@link Collection#contains(Object)}.
      */
+    @Override
     public boolean retainAll(final Collection<?> coll) {
         boolean modified = false;
         final Iterator<E> it = iterator();
@@ -287,6 +308,7 @@ public abstract class AbstractLinkedList<E> implements List<E> {
         return modified;
     }
 
+    @Override
     public E set(final int index, final E value) {
         final Node<E> node = getNode(index, false);
         final E oldValue = node.getValue();
@@ -294,6 +316,7 @@ public abstract class AbstractLinkedList<E> implements List<E> {
         return oldValue;
     }
 
+    @Override
     public void clear() {
         removeAllNodes();
     }
@@ -816,10 +839,12 @@ public abstract class AbstractLinkedList<E> implements List<E> {
             return current;
         }
 
+        @Override
         public boolean hasNext() {
             return next != parent.header;
         }
 
+        @Override
         public E next() {
             checkModCount();
             if (!hasNext()) {
@@ -832,10 +857,12 @@ public abstract class AbstractLinkedList<E> implements List<E> {
             return value;
         }
 
+        @Override
         public boolean hasPrevious() {
             return next.previous != parent.header;
         }
 
+        @Override
         public E previous() {
             checkModCount();
             if (!hasPrevious()) {
@@ -848,15 +875,18 @@ public abstract class AbstractLinkedList<E> implements List<E> {
             return value;
         }
 
+        @Override
         public int nextIndex() {
             return nextIndex;
         }
 
+        @Override
         public int previousIndex() {
             // not normally overridden, as relative to nextIndex()
             return nextIndex() - 1;
         }
 
+        @Override
         public void remove() {
             checkModCount();
             if (current == next) {
@@ -872,11 +902,13 @@ public abstract class AbstractLinkedList<E> implements List<E> {
             expectedModCount++;
         }
 
+        @Override
         public void set(final E obj) {
             checkModCount();
             getLastNodeReturned().setValue(obj);
         }
 
+        @Override
         public void add(final E obj) {
             checkModCount();
             parent.addNodeBefore(next, obj);
diff --git a/src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java b/src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java
index be24054..bef23bf 100644
--- a/src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/list/AbstractListDecorator.java
@@ -77,42 +77,52 @@ public abstract class AbstractListDecorator<E> extends AbstractCollectionDecorat
 
     //-----------------------------------------------------------------------
 
+    @Override
     public void add(final int index, final E object) {
         decorated().add(index, object);
     }
 
+    @Override
     public boolean addAll(final int index, final Collection<? extends E> coll) {
         return decorated().addAll(index, coll);
     }
 
+    @Override
     public E get(final int index) {
         return decorated().get(index);
     }
 
+    @Override
     public int indexOf(final Object object) {
         return decorated().indexOf(object);
     }
 
+    @Override
     public int lastIndexOf(final Object object) {
         return decorated().lastIndexOf(object);
     }
 
+    @Override
     public ListIterator<E> listIterator() {
         return decorated().listIterator();
     }
 
+    @Override
     public ListIterator<E> listIterator(final int index) {
         return decorated().listIterator(index);
     }
 
+    @Override
     public E remove(final int index) {
         return decorated().remove(index);
     }
 
+    @Override
     public E set(final int index, final E object) {
         return decorated().set(index, object);
     }
 
+    @Override
     public List<E> subList(final int fromIndex, final int toIndex) {
         return decorated().subList(fromIndex, toIndex);
     }
diff --git a/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java b/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java
index 33ee16c..7c2f16f 100644
--- a/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java
+++ b/src/main/java/org/apache/commons/collections4/list/FixedSizeList.java
@@ -171,10 +171,12 @@ public class FixedSizeList<E>
         }
     }
 
+    @Override
     public boolean isFull() {
         return true;
     }
 
+    @Override
     public int maxSize() {
         return size();
     }
diff --git a/src/main/java/org/apache/commons/collections4/list/PredicatedList.java b/src/main/java/org/apache/commons/collections4/list/PredicatedList.java
index b158fdc..bc475be 100644
--- a/src/main/java/org/apache/commons/collections4/list/PredicatedList.java
+++ b/src/main/java/org/apache/commons/collections4/list/PredicatedList.java
@@ -106,29 +106,35 @@ public class PredicatedList<E> extends PredicatedCollection<E> implements List<E
 
     //-----------------------------------------------------------------------
 
+    @Override
     public E get(final int index) {
         return decorated().get(index);
     }
 
+    @Override
     public int indexOf(final Object object) {
         return decorated().indexOf(object);
     }
 
+    @Override
     public int lastIndexOf(final Object object) {
         return decorated().lastIndexOf(object);
     }
 
+    @Override
     public E remove(final int index) {
         return decorated().remove(index);
     }
 
     //-----------------------------------------------------------------------
 
+    @Override
     public void add(final int index, final E object) {
         validate(object);
         decorated().add(index, object);
     }
 
+    @Override
     public boolean addAll(final int index, final Collection<? extends E> coll) {
         for (final E aColl : coll) {
             validate(aColl);
@@ -136,19 +142,23 @@ public class PredicatedList<E> extends PredicatedCollection<E> implements List<E
         return decorated().addAll(index, coll);
     }
 
+    @Override
     public ListIterator<E> listIterator() {
         return listIterator(0);
     }
 
+    @Override
     public ListIterator<E> listIterator(final int i) {
         return new PredicatedListIterator(decorated().listIterator(i));
     }
 
+    @Override
     public E set(final int index, final E object) {
         validate(object);
         return decorated().set(index, object);
     }
 
+    @Override
     public List<E> subList(final int fromIndex, final int toIndex) {
         final List<E> sub = decorated().subList(fromIndex, toIndex);
         return new PredicatedList<E>(sub, predicate);
diff --git a/src/main/java/org/apache/commons/collections4/list/TransformedList.java b/src/main/java/org/apache/commons/collections4/list/TransformedList.java
index 968368c..01d4894 100644
--- a/src/main/java/org/apache/commons/collections4/list/TransformedList.java
+++ b/src/main/java/org/apache/commons/collections4/list/TransformedList.java
@@ -126,47 +126,57 @@ public class TransformedList<E> extends TransformedCollection<E> implements List
 
     //-----------------------------------------------------------------------
 
+    @Override
     public E get(final int index) {
         return getList().get(index);
     }
 
+    @Override
     public int indexOf(final Object object) {
         return getList().indexOf(object);
     }
 
+    @Override
     public int lastIndexOf(final Object object) {
         return getList().lastIndexOf(object);
     }
 
+    @Override
     public E remove(final int index) {
         return getList().remove(index);
     }
 
     //-----------------------------------------------------------------------
 
+    @Override
     public void add(final int index, E object) {
         object = transform(object);
         getList().add(index, object);
     }
 
+    @Override
     public boolean addAll(final int index, Collection<? extends E> coll) {
         coll = transform(coll);
         return getList().addAll(index, coll);
     }
 
+    @Override
     public ListIterator<E> listIterator() {
         return listIterator(0);
     }
 
+    @Override
     public ListIterator<E> listIterator(final int i) {
         return new TransformedListIterator(getList().listIterator(i));
     }
 
+    @Override
     public E set(final int index, E object) {
         object = transform(object);
         return getList().set(index, object);
     }
 
+    @Override
     public List<E> subList(final int fromIndex, final int toIndex) {
         final List<E> sub = getList().subList(fromIndex, toIndex);
         return new TransformedList<E>(sub, transformer);
diff --git a/src/main/java/org/apache/commons/collections4/list/TreeList.java b/src/main/java/org/apache/commons/collections4/list/TreeList.java
index 43d5919..c318eaf 100644
--- a/src/main/java/org/apache/commons/collections4/list/TreeList.java
+++ b/src/main/java/org/apache/commons/collections4/list/TreeList.java
@@ -1034,10 +1034,12 @@ public class TreeList<E> extends AbstractList<E> {
             }
         }
 
+        @Override
         public boolean hasNext() {
             return nextIndex < parent.size();
         }
 
+        @Override
         public E next() {
             checkModCount();
             if (!hasNext()) {
@@ -1053,10 +1055,12 @@ public class TreeList<E> extends AbstractList<E> {
             return value;
         }
 
+        @Override
         public boolean hasPrevious() {
             return nextIndex > 0;
         }
 
+        @Override
         public E previous() {
             checkModCount();
             if (!hasPrevious()) {
@@ -1073,14 +1077,17 @@ public class TreeList<E> extends AbstractList<E> {
             return value;
         }
 
+        @Override
         public int nextIndex() {
             return nextIndex;
         }
 
+        @Override
         public int previousIndex() {
             return nextIndex() - 1;
         }
 
+        @Override
         public void remove() {
             checkModCount();
             if (currentIndex == -1) {
@@ -1099,6 +1106,7 @@ public class TreeList<E> extends AbstractList<E> {
             expectedModCount++;
         }
 
+        @Override
         public void set(final E obj) {
             checkModCount();
             if (current == null) {
@@ -1107,6 +1115,7 @@ public class TreeList<E> extends AbstractList<E> {
             current.setValue(obj);
         }
 
+        @Override
         public void add(final E obj) {
             checkModCount();
             parent.add(nextIndex, obj);
diff --git a/src/main/java/org/apache/commons/collections4/map/AbstractHashedMap.java b/src/main/java/org/apache/commons/collections4/map/AbstractHashedMap.java
index 195cb60..6f2867b 100644
--- a/src/main/java/org/apache/commons/collections4/map/AbstractHashedMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/AbstractHashedMap.java
@@ -752,6 +752,7 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
      *
      * @return the map iterator
      */
+    @Override
     public MapIterator<K, V> mapIterator() {
         if (size == 0) {
             return EmptyMapIterator.<K, V>emptyMapIterator();
@@ -768,10 +769,12 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
             super(parent);
         }
 
+        @Override
         public K next() {
             return super.nextEntry().getKey();
         }
 
+        @Override
         public K getKey() {
             final HashEntry<K, V> current = currentEntry();
             if (current == null) {
@@ -780,6 +783,7 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
             return current.getKey();
         }
 
+        @Override
         public V getValue() {
             final HashEntry<K, V> current = currentEntry();
             if (current == null) {
@@ -788,6 +792,7 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
             return current.getValue();
         }
 
+        @Override
         public V setValue(final V value) {
             final HashEntry<K, V> current = currentEntry();
             if (current == null) {
@@ -886,6 +891,7 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
             super(parent);
         }
 
+        @Override
         public Map.Entry<K, V> next() {
             return super.nextEntry();
         }
@@ -970,6 +976,7 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
             super((AbstractHashedMap<K, Object>) parent);
         }
 
+        @Override
         public K next() {
             return super.nextEntry().getKey();
         }
@@ -1047,6 +1054,7 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
             super((AbstractHashedMap<Object, V>) parent);
         }
 
+        @Override
         public V next() {
             return super.nextEntry().getValue();
         }
@@ -1079,6 +1087,7 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
             this.value = value;
         }
 
+        @Override
         @SuppressWarnings("unchecked")
         public K getKey() {
             if (key == NULL) {
@@ -1087,11 +1096,13 @@ public class AbstractHashedMap<K, V> extends AbstractMap<K, V> implements Iterab
             return (K) key;
         }
 
+        @Override
         @SuppressWarnings("unchecked")
         public V getValue() {
             return (V) value;
         }
 
+        @Override
         @SuppressWarnings("unchecked")
         public V setValue(final V value) {
             final Object old = this.value;
diff --git a/src/main/java/org/apache/commons/collections4/map/AbstractIterableMap.java b/src/main/java/org/apache/commons/collections4/map/AbstractIterableMap.java
index 104b4ba..c66b1be 100644
--- a/src/main/java/org/apache/commons/collections4/map/AbstractIterableMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/AbstractIterableMap.java
@@ -30,6 +30,7 @@ public abstract class AbstractIterableMap<K, V> implements IterableMap<K, V> {
     /**
      * {@inheritDoc}
      */
+    @Override
     public MapIterator<K, V> mapIterator() {
         return new EntrySetToMapIteratorAdapter<K, V>(entrySet());
     }
diff --git a/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java b/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java
index 6d84771..c4b63df 100644
--- a/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/AbstractLinkedMap.java
@@ -171,6 +171,7 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
      *
      * @return the eldest key
      */
+    @Override
     public K firstKey() {
         if (size == 0) {
             throw new NoSuchElementException("Map is empty");
@@ -183,6 +184,7 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
      *
      * @return the most recently inserted key
      */
+    @Override
     public K lastKey() {
         if (size == 0) {
             throw new NoSuchElementException("Map is empty");
@@ -196,6 +198,7 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
      * @param key  the key to get after
      * @return the next key
      */
+    @Override
     public K nextKey(final Object key) {
         final LinkEntry<K, V> entry = getEntry(key);
         return entry == null || entry.after == header ? null : entry.after.getKey();
@@ -212,6 +215,7 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
      * @param key  the key to get before
      * @return the previous key
      */
+    @Override
     public K previousKey(final Object key) {
         final LinkEntry<K, V> entry = getEntry(key);
         return entry == null || entry.before == header ? null : entry.before.getKey();
@@ -353,14 +357,17 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
             super(parent);
         }
 
+        @Override
         public K next() {
             return super.nextEntry().getKey();
         }
 
+        @Override
         public K previous() {
             return super.previousEntry().getKey();
         }
 
+        @Override
         public K getKey() {
             final LinkEntry<K, V> current = currentEntry();
             if (current == null) {
@@ -369,6 +376,7 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
             return current.getKey();
         }
 
+        @Override
         public V getValue() {
             final LinkEntry<K, V> current = currentEntry();
             if (current == null) {
@@ -377,6 +385,7 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
             return current.getValue();
         }
 
+        @Override
         public V setValue(final V value) {
             final LinkEntry<K, V> current = currentEntry();
             if (current == null) {
@@ -411,10 +420,12 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
             super(parent);
         }
 
+        @Override
         public Map.Entry<K, V> next() {
             return super.nextEntry();
         }
 
+        @Override
         public Map.Entry<K, V> previous() {
             return super.previousEntry();
         }
@@ -446,10 +457,12 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
             super((AbstractLinkedMap<K, Object>) parent);
         }
 
+        @Override
         public K next() {
             return super.nextEntry().getKey();
         }
 
+        @Override
         public K previous() {
             return super.previousEntry().getKey();
         }
@@ -481,10 +494,12 @@ public abstract class AbstractLinkedMap<K, V> extends AbstractHashedMap<K, V> im
             super((AbstractLinkedMap<Object, V>) parent);
         }
 
+        @Override
         public V next() {
             return super.nextEntry().getValue();
         }
 
+        @Override
         public V previous() {
             return super.previousEntry().getValue();
         }
diff --git a/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java b/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java
index d718370..1939bad 100644
--- a/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/map/AbstractMapDecorator.java
@@ -74,50 +74,62 @@ public abstract class AbstractMapDecorator<K, V> extends AbstractIterableMap<K,
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public void clear() {
         decorated().clear();
     }
 
+    @Override
     public boolean containsKey(final Object key) {
         return decorated().containsKey(key);
     }
 
+    @Override
     public boolean containsValue(final Object value) {
         return decorated().containsValue(value);
     }
 
+    @Override
     public Set<Map.Entry<K, V>> entrySet() {
         return decorated().entrySet();
     }
 
+    @Override
     public V get(final Object key) {
         return decorated().get(key);
     }
 
+    @Override
     public boolean isEmpty() {
         return decorated().isEmpty();
     }
 
+    @Override
     public Set<K> keySet() {
         return decorated().keySet();
     }
 
+    @Override
     public V put(final K key, final V value) {
         return decorated().put(key, value);
     }
 
+    @Override
     public void putAll(final Map<? extends K, ? extends V> mapToCopy) {
         decorated().putAll(mapToCopy);
     }
 
+    @Override
     public V remove(final Object key) {
         return decorated().remove(key);
     }
 
+    @Override
     public int size() {
         return decorated().size();
     }
 
+    @Override
     public Collection<V> values() {
         return decorated().values();
     }
diff --git a/src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java b/src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java
index f4d2eb4..6c06d2f 100644
--- a/src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/map/AbstractOrderedMapDecorator.java
@@ -66,18 +66,22 @@ public abstract class AbstractOrderedMapDecorator<K, V> extends AbstractMapDecor
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public K firstKey() {
         return decorated().firstKey();
     }
 
+    @Override
     public K lastKey() {
         return decorated().lastKey();
     }
 
+    @Override
     public K nextKey(final K key) {
         return decorated().nextKey(key);
     }
 
+    @Override
     public K previousKey(final K key) {
         return decorated().previousKey(key);
     }
diff --git a/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java b/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java
index 7611b48..d32e63f 100644
--- a/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/AbstractReferenceMap.java
@@ -856,6 +856,7 @@ public abstract class AbstractReferenceMap<K, V> extends AbstractHashedMap<K, V>
             super(parent);
         }
 
+        @Override
         public Map.Entry<K, V> next() {
             return nextEntry();
         }
@@ -872,6 +873,7 @@ public abstract class AbstractReferenceMap<K, V> extends AbstractHashedMap<K, V>
             super((AbstractReferenceMap<K, Object>) parent);
         }
 
+        @Override
         public K next() {
             return nextEntry().getKey();
         }
@@ -887,6 +889,7 @@ public abstract class AbstractReferenceMap<K, V> extends AbstractHashedMap<K, V>
             super((AbstractReferenceMap<Object, V>) parent);
         }
 
+        @Override
         public V next() {
             return nextEntry().getValue();
         }
@@ -901,10 +904,12 @@ public abstract class AbstractReferenceMap<K, V> extends AbstractHashedMap<K, V>
             super(parent);
         }
 
+        @Override
         public K next() {
             return nextEntry().getKey();
         }
 
+        @Override
         public K getKey() {
             final HashEntry<K, V> current = currentEntry();
             if (current == null) {
@@ -913,6 +918,7 @@ public abstract class AbstractReferenceMap<K, V> extends AbstractHashedMap<K, V>
             return current.getKey();
         }
 
+        @Override
         public V getValue() {
             final HashEntry<K, V> current = currentEntry();
             if (current == null) {
@@ -921,6 +927,7 @@ public abstract class AbstractReferenceMap<K, V> extends AbstractHashedMap<K, V>
             return current.getValue();
         }
 
+        @Override
         public V setValue(final V value) {
             final HashEntry<K, V> current = currentEntry();
             if (current == null) {
diff --git a/src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java b/src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java
index c867db1..d032197 100644
--- a/src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/map/AbstractSortedMapDecorator.java
@@ -76,35 +76,43 @@ public abstract class AbstractSortedMapDecorator<K, V> extends AbstractMapDecora
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public Comparator<? super K> comparator() {
         return decorated().comparator();
     }
 
+    @Override
     public K firstKey() {
         return decorated().firstKey();
     }
 
+    @Override
     public K lastKey() {
         return decorated().lastKey();
     }
 
+    @Override
     public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
         return decorated().subMap(fromKey, toKey);
     }
 
+    @Override
     public SortedMap<K, V> headMap(final K toKey) {
         return decorated().headMap(toKey);
     }
 
+    @Override
     public SortedMap<K, V> tailMap(final K fromKey) {
         return decorated().tailMap(fromKey);
     }
 
+    @Override
     public K previousKey(final K key) {
         final SortedMap<K, V> headMap = headMap(key);
         return headMap.isEmpty() ? null : headMap.lastKey();
     }
 
+    @Override
     public K nextKey(final K key) {
         final Iterator<K> it = tailMap(key).keySet().iterator();
         it.next();
@@ -148,6 +156,7 @@ public abstract class AbstractSortedMapDecorator<K, V> extends AbstractMapDecora
         /**
          * {@inheritDoc}
          */
+        @Override
         public boolean hasPrevious() {
             return ((ListIterator<Map.Entry<K, V>>) iterator).hasPrevious();
         }
@@ -155,6 +164,7 @@ public abstract class AbstractSortedMapDecorator<K, V> extends AbstractMapDecora
         /**
          * {@inheritDoc}
          */
+        @Override
         public K previous() {
             entry = ((ListIterator<Map.Entry<K, V>>) iterator).previous();
             return getKey();
diff --git a/src/main/java/org/apache/commons/collections4/map/CompositeMap.java b/src/main/java/org/apache/commons/collections4/map/CompositeMap.java
index 7c16b2a..d5c4861 100644
--- a/src/main/java/org/apache/commons/collections4/map/CompositeMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/CompositeMap.java
@@ -173,6 +173,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      *
      * @throws UnsupportedOperationException if any of the composited Maps do not support clear()
      */
+    @Override
     public void clear() {
         for (int i = this.composite.length - 1; i >= 0; --i) {
             this.composite[i].clear();
@@ -195,6 +196,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      * @throws NullPointerException if the key is {@code null} and this map
      *            does not not permit {@code null} keys (optional).
      */
+    @Override
     public boolean containsKey(final Object key) {
         for (int i = this.composite.length - 1; i >= 0; --i) {
             if (this.composite[i].containsKey(key)) {
@@ -220,6 +222,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      * @throws NullPointerException if the value is {@code null} and this map
      *            does not not permit {@code null} values (optional).
      */
+    @Override
     public boolean containsValue(final Object value) {
         for (int i = this.composite.length - 1; i >= 0; --i) {
             if (this.composite[i].containsValue(value)) {
@@ -246,6 +249,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      * @see CompositeSet
      * @return a set view of the mappings contained in this map.
      */
+    @Override
     public Set<Map.Entry<K, V>> entrySet() {
         final CompositeSet<Map.Entry<K, V>> entries = new CompositeSet<Map.Entry<K,V>>();
         for (int i = composite.length - 1; i >= 0; --i) {
@@ -278,6 +282,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      *
      * @see #containsKey(Object)
      */
+    @Override
     public V get(final Object key) {
         for (int i = this.composite.length - 1; i >= 0; --i) {
             if (this.composite[i].containsKey(key)) {
@@ -292,6 +297,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      *
      * @return {@code true} if this map contains no key-value mappings.
      */
+    @Override
     public boolean isEmpty() {
         for (int i = this.composite.length - 1; i >= 0; --i) {
             if (!this.composite[i].isEmpty()) {
@@ -316,6 +322,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      *
      * @return a set view of the keys contained in this map.
      */
+    @Override
     public Set<K> keySet() {
         final CompositeSet<K> keys = new CompositeSet<K>();
         for (int i = this.composite.length - 1; i >= 0; --i) {
@@ -349,6 +356,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      *            keys or values, and the specified key or value is
      *            {@code null}.
      */
+    @Override
     public V put(final K key, final V value) {
         if (this.mutator == null) {
             throw new UnsupportedOperationException("No mutator specified");
@@ -378,6 +386,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      *         this map does not permit {@code null} keys or values, and the
      *         specified map contains {@code null} keys or values.
      */
+    @Override
     public void putAll(final Map<? extends K, ? extends V> map) {
         if (this.mutator == null) {
             throw new UnsupportedOperationException("No mutator specified");
@@ -410,6 +419,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      * @throws UnsupportedOperationException if the {@code remove} method is
      *         not supported by the composited map containing the key
      */
+    @Override
     public V remove(final Object key) {
         for (int i = this.composite.length - 1; i >= 0; --i) {
             if (this.composite[i].containsKey(key)) {
@@ -426,6 +436,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      *
      * @return the number of key-value mappings in this map.
      */
+    @Override
     public int size() {
         int size = 0;
         for (int i = this.composite.length - 1; i >= 0; --i) {
@@ -447,6 +458,7 @@ public class CompositeMap<K, V> extends AbstractIterableMap<K, V> implements Ser
      *
      * @return a collection view of the values contained in this map.
      */
+    @Override
     public Collection<V> values() {
         final CompositeCollection<V> values = new CompositeCollection<V>();
         for (int i = composite.length - 1; i >= 0; --i) {
diff --git a/src/main/java/org/apache/commons/collections4/map/EntrySetToMapIteratorAdapter.java b/src/main/java/org/apache/commons/collections4/map/EntrySetToMapIteratorAdapter.java
index 668d555..5b0e10f 100644
--- a/src/main/java/org/apache/commons/collections4/map/EntrySetToMapIteratorAdapter.java
+++ b/src/main/java/org/apache/commons/collections4/map/EntrySetToMapIteratorAdapter.java
@@ -52,6 +52,7 @@ public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, Re
     /**
      * {@inheritDoc}
      */
+    @Override
     public K getKey() {
         return current().getKey();
     }
@@ -59,6 +60,7 @@ public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, Re
     /**
      * {@inheritDoc}
      */
+    @Override
     public V getValue() {
         return current().getValue();
     }
@@ -66,6 +68,7 @@ public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, Re
     /**
      * {@inheritDoc}
      */
+    @Override
     public V setValue(final V value) {
         return current().setValue(value);
     }
@@ -73,6 +76,7 @@ public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, Re
     /**
      * {@inheritDoc}
      */
+    @Override
     public boolean hasNext() {
         return iterator.hasNext();
     }
@@ -80,6 +84,7 @@ public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, Re
     /**
      * {@inheritDoc}
      */
+    @Override
     public K next() {
         entry = iterator.next();
         return getKey();
@@ -88,6 +93,7 @@ public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, Re
     /**
      * {@inheritDoc}
      */
+    @Override
     public synchronized void reset() {
         iterator = entrySet.iterator();
     }
@@ -95,6 +101,7 @@ public class EntrySetToMapIteratorAdapter<K, V> implements MapIterator<K, V>, Re
     /**
      * {@inheritDoc}
      */
+    @Override
     public void remove() {
         iterator.remove();
         entry = null;
diff --git a/src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java b/src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java
index 29e35c2..706f5dc 100644
--- a/src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/FixedSizeMap.java
@@ -159,10 +159,12 @@ public class FixedSizeMap<K, V>
         return UnmodifiableCollection.unmodifiableCollection(coll);
     }
 
+    @Override
     public boolean isFull() {
         return true;
     }
 
+    @Override
     public int maxSize() {
         return size();
     }
diff --git a/src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java b/src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java
index 4a9deaa..fc7f31a 100644
--- a/src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/FixedSizeSortedMap.java
@@ -171,10 +171,12 @@ public class FixedSizeSortedMap<K, V>
         return new FixedSizeSortedMap<K, V>(getSortedMap().tailMap(fromKey));
     }
 
+    @Override
     public boolean isFull() {
         return true;
     }
 
+    @Override
     public int maxSize() {
         return size();
     }
diff --git a/src/main/java/org/apache/commons/collections4/map/Flat3Map.java b/src/main/java/org/apache/commons/collections4/map/Flat3Map.java
index 6b07d05..caaf73a 100644
--- a/src/main/java/org/apache/commons/collections4/map/Flat3Map.java
+++ b/src/main/java/org/apache/commons/collections4/map/Flat3Map.java
@@ -123,6 +123,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      * @param key  the key
      * @return the mapped value, null if no match
      */
+    @Override
     public V get(final Object key) {
         if (delegateMap != null) {
             return delegateMap.get(key);
@@ -171,6 +172,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      *
      * @return the size
      */
+    @Override
     public int size() {
         if (delegateMap != null) {
             return delegateMap.size();
@@ -183,6 +185,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      *
      * @return true if the map is currently size zero
      */
+    @Override
     public boolean isEmpty() {
         return size() == 0;
     }
@@ -194,6 +197,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      * @param key  the key to search for
      * @return true if the map contains the key
      */
+    @Override
     public boolean containsKey(final Object key) {
         if (delegateMap != null) {
             return delegateMap.containsKey(key);
@@ -241,6 +245,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      * @param value  the value to search for
      * @return true if the map contains the key
      */
+    @Override
     public boolean containsValue(final Object value) {
         if (delegateMap != null) {
             return delegateMap.containsValue(value);
@@ -287,6 +292,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      * @param value  the value to add
      * @return the value previously mapped to this key, null if none
      */
+    @Override
     public V put(final K key, final V value) {
         if (delegateMap != null) {
             return delegateMap.put(key, value);
@@ -371,6 +377,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      * @param map  the map to add
      * @throws NullPointerException if the map is null
      */
+    @Override
     public void putAll(final Map<? extends K, ? extends V> map) {
         final int size = map.size();
         if (size == 0) {
@@ -434,6 +441,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      * @param key  the mapping to remove
      * @return the value mapped to the removed key, null if key not in map
      */
+    @Override
     public V remove(final Object key) {
         if (delegateMap != null) {
             return delegateMap.remove(key);
@@ -582,6 +590,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      * Clears the map, resetting the size to zero and nullifying references
      * to avoid garbage collection issues.
      */
+    @Override
     public void clear() {
         if (delegateMap != null) {
             delegateMap.clear();  // should aid gc
@@ -606,6 +615,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      *
      * @return the map iterator
      */
+    @Override
     public MapIterator<K, V> mapIterator() {
         if (delegateMap != null) {
             return delegateMap.mapIterator();
@@ -629,10 +639,12 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             this.parent = parent;
         }
 
+        @Override
         public boolean hasNext() {
             return nextIndex < parent.size;
         }
 
+        @Override
         public K next() {
             if (hasNext() == false) {
                 throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);
@@ -642,6 +654,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             return getKey();
         }
 
+        @Override
         public void remove() {
             if (canRemove == false) {
                 throw new IllegalStateException(AbstractHashedMap.REMOVE_INVALID);
@@ -651,6 +664,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             canRemove = false;
         }
 
+        @Override
         public K getKey() {
             if (canRemove == false) {
                 throw new IllegalStateException(AbstractHashedMap.GETKEY_INVALID);
@@ -666,6 +680,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             throw new IllegalStateException("Invalid map index: " + nextIndex);
         }
 
+        @Override
         public V getValue() {
             if (canRemove == false) {
                 throw new IllegalStateException(AbstractHashedMap.GETVALUE_INVALID);
@@ -681,6 +696,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             throw new IllegalStateException("Invalid map index: " + nextIndex);
         }
 
+        @Override
         public V setValue(final V value) {
             if (canRemove == false) {
                 throw new IllegalStateException(AbstractHashedMap.SETVALUE_INVALID);
@@ -702,6 +718,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             return old;
         }
 
+        @Override
         public void reset() {
             nextIndex = 0;
             canRemove = false;
@@ -726,6 +743,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      *
      * @return the entrySet view
      */
+    @Override
     public Set<Map.Entry<K, V>> entrySet() {
         if (delegateMap != null) {
             return delegateMap.entrySet();
@@ -802,6 +820,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             this.removed = flag;
         }
 
+        @Override
         public K getKey() {
             if (removed) {
                 throw new IllegalStateException(AbstractHashedMap.GETKEY_INVALID);
@@ -817,6 +836,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             throw new IllegalStateException("Invalid map index: " + index);
         }
 
+        @Override
         public V getValue() {
             if (removed) {
                 throw new IllegalStateException(AbstractHashedMap.GETVALUE_INVALID);
@@ -832,6 +852,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             throw new IllegalStateException("Invalid map index: " + index);
         }
 
+        @Override
         public V setValue(final V value) {
             if (removed) {
                 throw new IllegalStateException(AbstractHashedMap.SETVALUE_INVALID);
@@ -933,6 +954,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             super(parent);
         }
 
+        @Override
         public Map.Entry<K, V> next() {
             return nextEntry();
         }
@@ -945,6 +967,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      *
      * @return the keySet view
      */
+    @Override
     public Set<K> keySet() {
         if (delegateMap != null) {
             return delegateMap.keySet();
@@ -1007,6 +1030,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             super((Flat3Map<K, Object>) parent);
         }
 
+        @Override
         public K next() {
             return nextEntry().getKey();
         }
@@ -1019,6 +1043,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
      *
      * @return the values view
      */
+    @Override
     public Collection<V> values() {
         if (delegateMap != null) {
             return delegateMap.values();
@@ -1074,6 +1099,7 @@ public class Flat3Map<K, V> implements IterableMap<K, V>, Serializable, Cloneabl
             super((Flat3Map<Object, V>) parent);
         }
 
+        @Override
         public V next() {
             return nextEntry().getValue();
         }
diff --git a/src/main/java/org/apache/commons/collections4/map/LRUMap.java b/src/main/java/org/apache/commons/collections4/map/LRUMap.java
index e6b26bc..b7c2dc8 100644
--- a/src/main/java/org/apache/commons/collections4/map/LRUMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/LRUMap.java
@@ -443,6 +443,7 @@ public class LRUMap<K, V>
      *
      * @return <code>true</code> if the map is full
      */
+    @Override
     public boolean isFull() {
         return size >= maxSize;
     }
@@ -452,6 +453,7 @@ public class LRUMap<K, V>
      *
      * @return the maximum number of elements the map can hold
      */
+    @Override
     public int maxSize() {
         return maxSize;
     }
diff --git a/src/main/java/org/apache/commons/collections4/map/LazySortedMap.java b/src/main/java/org/apache/commons/collections4/map/LazySortedMap.java
index 459f586..dd536ec 100644
--- a/src/main/java/org/apache/commons/collections4/map/LazySortedMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/LazySortedMap.java
@@ -127,28 +127,34 @@ public class LazySortedMap<K,V> extends LazyMap<K,V> implements SortedMap<K,V> {
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public K firstKey() {
         return getSortedMap().firstKey();
     }
 
+    @Override
     public K lastKey() {
         return getSortedMap().lastKey();
     }
 
+    @Override
     public Comparator<? super K> comparator() {
         return getSortedMap().comparator();
     }
 
+    @Override
     public SortedMap<K,V> subMap(final K fromKey, final K toKey) {
         final SortedMap<K,V> map = getSortedMap().subMap(fromKey, toKey);
         return new LazySortedMap<K,V>(map, factory);
     }
 
+    @Override
     public SortedMap<K,V> headMap(final K toKey) {
         final SortedMap<K,V> map = getSortedMap().headMap(toKey);
         return new LazySortedMap<K,V>(map, factory);
     }
 
+    @Override
     public SortedMap<K,V> tailMap(final K fromKey) {
         final SortedMap<K,V> map = getSortedMap().tailMap(fromKey);
         return new LazySortedMap<K,V>(map, factory);
diff --git a/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java b/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java
index 55c85f2..867c171 100644
--- a/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/ListOrderedMap.java
@@ -163,6 +163,7 @@ public class ListOrderedMap<K, V>
      * @return the first key currently in this map
      * @throws NoSuchElementException if this map is empty
      */
+    @Override
     public K firstKey() {
         if (size() == 0) {
             throw new NoSuchElementException("Map is empty");
@@ -176,6 +177,7 @@ public class ListOrderedMap<K, V>
      * @return the last key currently in this map
      * @throws NoSuchElementException if this map is empty
      */
+    @Override
     public K lastKey() {
         if (size() == 0) {
             throw new NoSuchElementException("Map is empty");
@@ -190,6 +192,7 @@ public class ListOrderedMap<K, V>
      * @param key  the key to find previous for
      * @return the next key, null if no match or at start
      */
+    @Override
     public K nextKey(final Object key) {
         final int index = insertOrder.indexOf(key);
         if (index >= 0 && index < size() - 1) {
@@ -205,6 +208,7 @@ public class ListOrderedMap<K, V>
      * @param key  the key to find previous for
      * @return the previous key, null if no match or at start
      */
+    @Override
     public K previousKey(final Object key) {
         final int index = insertOrder.indexOf(key);
         if (index > 0) {
@@ -525,6 +529,7 @@ public class ListOrderedMap<K, V>
         @Override
         public Iterator<V> iterator() {
             return new AbstractUntypedIteratorDecorator<Map.Entry<Object, V>, V>(parent.entrySet().iterator()) {
+                @Override
                 public V next() {
                     return getIterator().next().getValue();
                 }
@@ -575,6 +580,7 @@ public class ListOrderedMap<K, V>
         @Override
         public Iterator<K> iterator() {
             return new AbstractUntypedIteratorDecorator<Map.Entry<K, Object>, K>(parent.entrySet().iterator()) {
+                @Override
                 public K next() {
                     return getIterator().next().getKey();
                 }
@@ -673,6 +679,7 @@ public class ListOrderedMap<K, V>
             this.parent = parent;
         }
 
+        @Override
         public Map.Entry<K, V> next() {
             last = getIterator().next();
             return new ListOrderedMapEntry<K, V>(parent, last);
@@ -718,26 +725,31 @@ public class ListOrderedMap<K, V>
             this.iterator = parent.insertOrder.listIterator();
         }
 
+        @Override
         public boolean hasNext() {
             return iterator.hasNext();
         }
 
+        @Override
         public K next() {
             last = iterator.next();
             readable = true;
             return last;
         }
 
+        @Override
         public boolean hasPrevious() {
             return iterator.hasPrevious();
         }
 
+        @Override
         public K previous() {
             last = iterator.previous();
             readable = true;
             return last;
         }
 
+        @Override
         public void remove() {
             if (readable == false) {
                 throw new IllegalStateException(AbstractHashedMap.REMOVE_INVALID);
@@ -747,6 +759,7 @@ public class ListOrderedMap<K, V>
             readable = false;
         }
 
+        @Override
         public K getKey() {
             if (readable == false) {
                 throw new IllegalStateException(AbstractHashedMap.GETKEY_INVALID);
@@ -754,6 +767,7 @@ public class ListOrderedMap<K, V>
             return last;
         }
 
+        @Override
         public V getValue() {
             if (readable == false) {
                 throw new IllegalStateException(AbstractHashedMap.GETVALUE_INVALID);
@@ -761,6 +775,7 @@ public class ListOrderedMap<K, V>
             return parent.get(last);
         }
 
+        @Override
         public V setValue(final V value) {
             if (readable == false) {
                 throw new IllegalStateException(AbstractHashedMap.SETVALUE_INVALID);
@@ -768,6 +783,7 @@ public class ListOrderedMap<K, V>
             return parent.map.put(last, value);
         }
 
+        @Override
         public void reset() {
             iterator = parent.insertOrder.listIterator();
             last = null;
diff --git a/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java b/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java
index f156409..16ae3b8 100644
--- a/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/PassiveExpiringMap.java
@@ -134,6 +134,7 @@ public class PassiveExpiringMap<K, V>
          *         {@link System#currentTimeMillis()} is returned. Otherwise, -1
          *         is returned indicating the entry never expires.
          */
+        @Override
         public long expirationTime(final K key, final V value) {
             if (timeToLiveMillis >= 0L) {
                 // avoid numerical overflow
diff --git a/src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java b/src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java
index aa10931..11f1e4b 100644
--- a/src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/PredicatedSortedMap.java
@@ -98,28 +98,34 @@ public class PredicatedSortedMap<K, V> extends PredicatedMap<K, V> implements So
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public K firstKey() {
         return getSortedMap().firstKey();
     }
 
+    @Override
     public K lastKey() {
         return getSortedMap().lastKey();
     }
 
+    @Override
     public Comparator<? super K> comparator() {
         return getSortedMap().comparator();
     }
 
+    @Override
     public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
         final SortedMap<K, V> map = getSortedMap().subMap(fromKey, toKey);
         return new PredicatedSortedMap<K, V>(map, keyPredicate, valuePredicate);
     }
 
+    @Override
     public SortedMap<K, V> headMap(final K toKey) {
         final SortedMap<K, V> map = getSortedMap().headMap(toKey);
         return new PredicatedSortedMap<K, V>(map, keyPredicate, valuePredicate);
     }
 
+    @Override
     public SortedMap<K, V> tailMap(final K fromKey) {
         final SortedMap<K, V> map = getSortedMap().tailMap(fromKey);
         return new PredicatedSortedMap<K, V>(map, keyPredicate, valuePredicate);
diff --git a/src/main/java/org/apache/commons/collections4/map/SingletonMap.java b/src/main/java/org/apache/commons/collections4/map/SingletonMap.java
index a3362fe..342d4eb 100644
--- a/src/main/java/org/apache/commons/collections4/map/SingletonMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/SingletonMap.java
@@ -133,6 +133,7 @@ public class SingletonMap<K, V>
      *
      * @return the key
      */
+    @Override
     public K getKey() {
         return key;
     }
@@ -142,6 +143,7 @@ public class SingletonMap<K, V>
      *
      * @return the value
      */
+    @Override
     public V getValue() {
         return value;
     }
@@ -165,6 +167,7 @@ public class SingletonMap<K, V>
      *
      * @return true always
      */
+    @Override
     public boolean isFull() {
         return true;
     }
@@ -174,6 +177,7 @@ public class SingletonMap<K, V>
      *
      * @return 1 always
      */
+    @Override
     public int maxSize() {
         return 1;
     }
@@ -186,6 +190,7 @@ public class SingletonMap<K, V>
      * @param key  the key
      * @return the mapped value, null if no match
      */
+    @Override
     public V get(final Object key) {
         if (isEqualKey(key)) {
             return value;
@@ -198,6 +203,7 @@ public class SingletonMap<K, V>
      *
      * @return the size of 1
      */
+    @Override
     public int size() {
         return 1;
     }
@@ -207,6 +213,7 @@ public class SingletonMap<K, V>
      *
      * @return false always
      */
+    @Override
     public boolean isEmpty() {
         return false;
     }
@@ -218,6 +225,7 @@ public class SingletonMap<K, V>
      * @param key  the key to search for
      * @return true if the map contains the key
      */
+    @Override
     public boolean containsKey(final Object key) {
         return isEqualKey(key);
     }
@@ -228,6 +236,7 @@ public class SingletonMap<K, V>
      * @param value  the value to search for
      * @return true if the map contains the key
      */
+    @Override
     public boolean containsValue(final Object value) {
         return isEqualValue(value);
     }
@@ -244,6 +253,7 @@ public class SingletonMap<K, V>
      * @return the value previously mapped to this key, null if none
      * @throws IllegalArgumentException if the key does not match
      */
+    @Override
     public V put(final K key, final V value) {
         if (isEqualKey(key)) {
             return setValue(value);
@@ -262,6 +272,7 @@ public class SingletonMap<K, V>
      * @throws NullPointerException if the map is null
      * @throws IllegalArgumentException if the key does not match
      */
+    @Override
     public void putAll(final Map<? extends K, ? extends V> map) {
         switch (map.size()) {
             case 0:
@@ -284,6 +295,7 @@ public class SingletonMap<K, V>
      * @return the value mapped to the removed key, null if key not in map
      * @throws UnsupportedOperationException always
      */
+    @Override
     public V remove(final Object key) {
         throw new UnsupportedOperationException();
     }
@@ -291,6 +303,7 @@ public class SingletonMap<K, V>
     /**
      * Unsupported operation.
      */
+    @Override
     public void clear() {
         throw new UnsupportedOperationException();
     }
@@ -303,6 +316,7 @@ public class SingletonMap<K, V>
      *
      * @return the entrySet view
      */
+    @Override
     public Set<Map.Entry<K, V>> entrySet() {
         final Map.Entry<K, V> entry = new TiedMapEntry<K, V>(this, getKey());
         return Collections.singleton(entry);
@@ -315,6 +329,7 @@ public class SingletonMap<K, V>
      *
      * @return the keySet view
      */
+    @Override
     public Set<K> keySet() {
         return Collections.singleton(key);
     }
@@ -326,6 +341,7 @@ public class SingletonMap<K, V>
      *
      * @return the values view
      */
+    @Override
     public Collection<V> values() {
         return new SingletonValues<V>(this);
     }
@@ -333,6 +349,7 @@ public class SingletonMap<K, V>
     /**
      * {@inheritDoc}
      */
+    @Override
     public OrderedMapIterator<K, V> mapIterator() {
         return new SingletonMapIterator<K, V>(this);
     }
@@ -342,6 +359,7 @@ public class SingletonMap<K, V>
      *
      * @return the key
      */
+    @Override
     public K firstKey() {
         return getKey();
     }
@@ -351,6 +369,7 @@ public class SingletonMap<K, V>
      *
      * @return the key
      */
+    @Override
     public K lastKey() {
         return getKey();
     }
@@ -361,6 +380,7 @@ public class SingletonMap<K, V>
      * @param key  the next key
      * @return null always
      */
+    @Override
     public K nextKey(final K key) {
         return null;
     }
@@ -371,6 +391,7 @@ public class SingletonMap<K, V>
      * @param key  the next key
      * @return null always
      */
+    @Override
     public K previousKey(final K key) {
         return null;
     }
@@ -410,10 +431,12 @@ public class SingletonMap<K, V>
             this.parent = parent;
         }
 
+        @Override
         public boolean hasNext() {
             return hasNext;
         }
 
+        @Override
         public K next() {
             if (hasNext == false) {
                 throw new NoSuchElementException(AbstractHashedMap.NO_NEXT_ENTRY);
@@ -423,10 +446,12 @@ public class SingletonMap<K, V>
             return parent.getKey();
         }
 
+        @Override
         public boolean hasPrevious() {
             return hasNext == false;
         }
 
+        @Override
         public K previous() {
             if (hasNext == true) {
                 throw new NoSuchElementException(AbstractHashedMap.NO_PREVIOUS_ENTRY);
@@ -435,10 +460,12 @@ public class SingletonMap<K, V>
             return parent.getKey();
         }
 
+        @Override
         public void remove() {
             throw new UnsupportedOperationException();
         }
 
+        @Override
         public K getKey() {
             if (canGetSet == false) {
                 throw new IllegalStateException(AbstractHashedMap.GETKEY_INVALID);
@@ -446,6 +473,7 @@ public class SingletonMap<K, V>
             return parent.getKey();
         }
 
+        @Override
         public V getValue() {
             if (canGetSet == false) {
                 throw new IllegalStateException(AbstractHashedMap.GETVALUE_INVALID);
@@ -453,6 +481,7 @@ public class SingletonMap<K, V>
             return parent.getValue();
         }
 
+        @Override
         public V setValue(final V value) {
             if (canGetSet == false) {
                 throw new IllegalStateException(AbstractHashedMap.SETVALUE_INVALID);
@@ -460,6 +489,7 @@ public class SingletonMap<K, V>
             return parent.setValue(value);
         }
 
+        @Override
         public void reset() {
             hasNext = true;
         }
diff --git a/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java b/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java
index 7921e71..10bb1d7 100644
--- a/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/StaticBucketMap.java
@@ -171,6 +171,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      *
      * @return the current size
      */
+    @Override
     public int size() {
         int cnt = 0;
 
@@ -187,6 +188,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      *
      * @return true if empty
      */
+    @Override
     public boolean isEmpty() {
         return (size() == 0);
     }
@@ -197,6 +199,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      * @param key  the key to retrieve
      * @return the associated value
      */
+    @Override
     public V get(final Object key) {
         final int hash = getHash(key);
 
@@ -220,6 +223,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      * @param key  the key to check
      * @return true if found
      */
+    @Override
     public boolean containsKey(final Object key) {
         final int hash = getHash(key);
 
@@ -243,6 +247,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      * @param value  the value to check
      * @return true if found
      */
+    @Override
     public boolean containsValue(final Object value) {
         for (int i = 0; i < buckets.length; i++) {
             synchronized (locks[i]) {
@@ -268,6 +273,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      * @param value  the value to use
      * @return the previous mapping for the key
      */
+    @Override
     public V put(final K key, final V value) {
         final int hash = getHash(key);
 
@@ -313,6 +319,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      * @param key  the key to remove
      * @return the previous value at this key
      */
+    @Override
     public V remove(final Object key) {
         final int hash = getHash(key);
 
@@ -347,6 +354,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      *
      * @return the key set
      */
+    @Override
     public Set<K> keySet() {
         return new KeySet();
     }
@@ -356,6 +364,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      *
      * @return the values
      */
+    @Override
     public Collection<V> values() {
         return new Values();
     }
@@ -365,6 +374,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      *
      * @return the entry set
      */
+    @Override
     public Set<Map.Entry<K, V>> entrySet() {
         return new EntrySet();
     }
@@ -376,6 +386,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
      *
      * @param map  the map of entries to add
      */
+    @Override
     public void putAll(final Map<? extends K, ? extends V> map) {
         for (final Map.Entry<? extends K, ? extends V> entry : map.entrySet()) {
             put(entry.getKey(), entry.getValue());
@@ -385,6 +396,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
     /**
      * Clears the map of all entries.
      */
+    @Override
     public void clear() {
         for (int i = 0; i < buckets.length; i++) {
             final Lock lock = locks[i];
@@ -444,10 +456,12 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
         protected V value;
         protected Node<K, V> next;
 
+        @Override
         public K getKey() {
             return key;
         }
 
+        @Override
         public V getValue() {
             return value;
         }
@@ -473,6 +487,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
                 (value == null ? e2.getValue() == null : value.equals(e2.getValue())));
         }
 
+        @Override
         public V setValue(final V obj) {
             final V retVal = value;
             value = obj;
@@ -532,6 +547,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
 
     private class EntryIterator extends BaseIterator implements Iterator<Map.Entry<K, V>> {
 
+        @Override
         public Map.Entry<K, V> next() {
             return nextEntry();
         }
@@ -540,6 +556,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
 
     private class ValueIterator extends BaseIterator implements Iterator<V> {
 
+        @Override
         public V next() {
             return nextEntry().getValue();
         }
@@ -548,6 +565,7 @@ public final class StaticBucketMap<K, V> extends AbstractIterableMap<K, V> {
 
     private class KeyIterator extends BaseIterator implements Iterator<K> {
 
+        @Override
         public K next() {
             return nextEntry().getKey();
         }
diff --git a/src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java b/src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java
index 6044d33..5675611 100644
--- a/src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java
+++ b/src/main/java/org/apache/commons/collections4/map/TransformedSortedMap.java
@@ -129,28 +129,34 @@ public class TransformedSortedMap<K, V>
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public K firstKey() {
         return getSortedMap().firstKey();
     }
 
+    @Override
     public K lastKey() {
         return getSortedMap().lastKey();
     }
 
+    @Override
     public Comparator<? super K> comparator() {
         return getSortedMap().comparator();
     }
 
+    @Override
     public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
         final SortedMap<K, V> map = getSortedMap().subMap(fromKey, toKey);
         return new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);
     }
 
+    @Override
     public SortedMap<K, V> headMap(final K toKey) {
         final SortedMap<K, V> map = getSortedMap().headMap(toKey);
         return new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);
     }
 
+    @Override
     public SortedMap<K, V> tailMap(final K fromKey) {
         final SortedMap<K, V> map = getSortedMap().tailMap(fromKey);
         return new TransformedSortedMap<K, V>(map, keyTransformer, valueTransformer);
diff --git a/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java b/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java
index a98dbbd..3801757 100644
--- a/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/queue/AbstractQueueDecorator.java
@@ -70,22 +70,27 @@ public abstract class AbstractQueueDecorator<E> extends AbstractCollectionDecora
 
     //-----------------------------------------------------------------------
 
+    @Override
     public boolean offer(final E obj) {
         return decorated().offer(obj);
     }
 
+    @Override
     public E poll() {
         return decorated().poll();
     }
 
+    @Override
     public E peek() {
         return decorated().peek();
     }
 
+    @Override
     public E element() {
         return decorated().element();
     }
 
+    @Override
     public E remove() {
         return decorated().remove();
     }
diff --git a/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java b/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java
index 0ce1b75..3b098b3 100644
--- a/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java
+++ b/src/main/java/org/apache/commons/collections4/queue/CircularFifoQueue.java
@@ -185,6 +185,7 @@ public class CircularFifoQueue<E> extends AbstractCollection<E>
      *
      * @return always returns {@code false}
      */
+    @Override
     public boolean isFull() {
         return false;
     }
@@ -205,6 +206,7 @@ public class CircularFifoQueue<E> extends AbstractCollection<E>
      *
      * @return the maximum number of elements the collection can hold
      */
+    @Override
     public int maxSize() {
         return maxElements;
     }
@@ -280,10 +282,12 @@ public class CircularFifoQueue<E> extends AbstractCollection<E>
      * @return true, always
      * @throws NullPointerException  if the given element is null
      */
+    @Override
     public boolean offer(E element) {
         return add(element);
     }
 
+    @Override
     public E poll() {
         if (isEmpty()) {
             return null;
@@ -291,6 +295,7 @@ public class CircularFifoQueue<E> extends AbstractCollection<E>
         return remove();
     }
 
+    @Override
     public E element() {
         if (isEmpty()) {
             throw new NoSuchElementException("queue is empty");
@@ -298,6 +303,7 @@ public class CircularFifoQueue<E> extends AbstractCollection<E>
         return peek();
     }
 
+    @Override
     public E peek() {
         if (isEmpty()) {
             return null;
@@ -305,6 +311,7 @@ public class CircularFifoQueue<E> extends AbstractCollection<E>
         return elements[start];
     }
 
+    @Override
     public E remove() {
         if (isEmpty()) {
             throw new NoSuchElementException("queue is empty");
@@ -364,10 +371,12 @@ public class CircularFifoQueue<E> extends AbstractCollection<E>
             private int lastReturnedIndex = -1;
             private boolean isFirst = full;
 
+            @Override
             public boolean hasNext() {
                 return isFirst || index != end;
             }
 
+            @Override
             public E next() {
                 if (!hasNext()) {
                     throw new NoSuchElementException();
@@ -378,6 +387,7 @@ public class CircularFifoQueue<E> extends AbstractCollection<E>
                 return elements[lastReturnedIndex];
             }
 
+            @Override
             public void remove() {
                 if (lastReturnedIndex == -1) {
                     throw new IllegalStateException();
diff --git a/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java b/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java
index 3f35e87..334edd3 100644
--- a/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java
+++ b/src/main/java/org/apache/commons/collections4/queue/PredicatedQueue.java
@@ -94,23 +94,28 @@ public class PredicatedQueue<E> extends PredicatedCollection<E> implements Queue
      * @return the result of adding to the underlying queue
      * @throws IllegalArgumentException if the add is invalid
      */
+    @Override
     public boolean offer(final E object) {
         validate(object);
         return decorated().offer(object);
     }
 
+    @Override
     public E poll() {
         return decorated().poll();
     }
 
+    @Override
     public E peek() {
         return decorated().peek();
     }
 
+    @Override
     public E element() {
         return decorated().element();
     }
 
+    @Override
     public E remove() {
         return decorated().remove();
     }
diff --git a/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java b/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java
index c314c05..0f321d7 100644
--- a/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java
+++ b/src/main/java/org/apache/commons/collections4/queue/TransformedQueue.java
@@ -111,22 +111,27 @@ public class TransformedQueue<E> extends TransformedCollection<E> implements Que
 
     //-----------------------------------------------------------------------
 
+    @Override
     public boolean offer(final E obj) {
         return getQueue().offer(transform(obj));
     }
 
+    @Override
     public E poll() {
         return getQueue().poll();
     }
 
+    @Override
     public E peek() {
         return getQueue().peek();
     }
 
+    @Override
     public E element() {
         return getQueue().element();
     }
 
+    @Override
     public E remove() {
         return getQueue().remove();
     }
diff --git a/src/main/java/org/apache/commons/collections4/sequence/ReplacementsFinder.java b/src/main/java/org/apache/commons/collections4/sequence/ReplacementsFinder.java
index c815c1c..35e562e 100644
--- a/src/main/java/org/apache/commons/collections4/sequence/ReplacementsFinder.java
+++ b/src/main/java/org/apache/commons/collections4/sequence/ReplacementsFinder.java
@@ -74,6 +74,7 @@ public class ReplacementsFinder<T> implements CommandVisitor<T> {
      *
      * @param object  object to insert
      */
+    @Override
     public void visitInsertCommand(final T object) {
         pendingInsertions.add(object);
     }
@@ -86,6 +87,7 @@ public class ReplacementsFinder<T> implements CommandVisitor<T> {
      *
      * @param object  synchronization object detected
      */
+    @Override
     public void visitKeepCommand(final T object) {
         if (pendingDeletions.isEmpty() && pendingInsertions.isEmpty()) {
             ++skipped;
@@ -102,6 +104,7 @@ public class ReplacementsFinder<T> implements CommandVisitor<T> {
      *
      * @param object  object to delete
      */
+    @Override
     public void visitDeleteCommand(final T object) {
         pendingDeletions.add(object);
     }
diff --git a/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java b/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java
index 44818ae..f3123ab 100644
--- a/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/set/AbstractSortedSetDecorator.java
@@ -65,26 +65,32 @@ public abstract class AbstractSortedSetDecorator<E>
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public SortedSet<E> subSet(final E fromElement, final E toElement) {
         return decorated().subSet(fromElement, toElement);
     }
 
+    @Override
     public SortedSet<E> headSet(final E toElement) {
         return decorated().headSet(toElement);
     }
 
+    @Override
     public SortedSet<E> tailSet(final E fromElement) {
         return decorated().tailSet(fromElement);
     }
 
+    @Override
     public E first() {
         return decorated().first();
     }
 
+    @Override
     public E last() {
         return decorated().last();
     }
 
+    @Override
     public Comparator<? super E> comparator() {
         return decorated().comparator();
     }
diff --git a/src/main/java/org/apache/commons/collections4/set/CompositeSet.java b/src/main/java/org/apache/commons/collections4/set/CompositeSet.java
index 8260273..22eccc1 100644
--- a/src/main/java/org/apache/commons/collections4/set/CompositeSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/CompositeSet.java
@@ -92,6 +92,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      *
      * @return total number of elements in all contained containers
      */
+    @Override
     public int size() {
         int size = 0;
         for (final Set<E> item : all) {
@@ -107,6 +108,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      *
      * @return true if all of the contained sets are empty
      */
+    @Override
     public boolean isEmpty() {
         for (final Set<E> item : all) {
             if (item.isEmpty() == false) {
@@ -124,6 +126,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @param obj  the object to search for
      * @return true if obj is contained in any of the contained sets
      */
+    @Override
     public boolean contains(final Object obj) {
         for (final Set<E> item : all) {
             if (item.contains(obj)) {
@@ -143,6 +146,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      *  the order they were added, but this behavior should not be relied upon.
      * @see IteratorChain
      */
+    @Override
     public Iterator<E> iterator() {
         if (all.isEmpty()) {
             return EmptyIterator.<E>emptyIterator();
@@ -159,6 +163,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      *
      * @return an object array of all the elements in the collection
      */
+    @Override
     public Object[] toArray() {
         final Object[] result = new Object[size()];
         int i = 0;
@@ -176,6 +181,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @param array  the array to use, populating if possible
      * @return an array of all the elements in the collection
      */
+    @Override
     @SuppressWarnings("unchecked")
     public <T> T[] toArray(final T[] array) {
         final int size = size();
@@ -209,6 +215,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @throws NullPointerException if the object cannot be added because its null
      * @throws IllegalArgumentException if the object cannot be added
      */
+    @Override
     public boolean add(final E obj) {
         if (mutator == null) {
            throw new UnsupportedOperationException(
@@ -224,6 +231,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @param obj  object to be removed
      * @return true if the object is removed, false otherwise
      */
+    @Override
     public boolean remove(final Object obj) {
         for (final Set<E> set : getSets()) {
             if (set.contains(obj)) {
@@ -242,6 +250,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @param coll  the collection to check for
      * @return true if all elements contained
      */
+    @Override
     public boolean containsAll(final Collection<?> coll) {
         for (final Object item : coll) {
             if (contains(item) == false) {
@@ -262,6 +271,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @throws NullPointerException if the object cannot be added because its null
      * @throws IllegalArgumentException if the object cannot be added
      */
+    @Override
     public boolean addAll(final Collection<? extends E> coll) {
         if (mutator == null) {
             throw new UnsupportedOperationException(
@@ -279,6 +289,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @return true if the composite was modified
      * @throws UnsupportedOperationException if removeAll is unsupported
      */
+    @Override
     public boolean removeAll(final Collection<?> coll) {
         if (coll.size() == 0) {
             return false;
@@ -300,6 +311,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      * @return true if the composite was modified
      * @throws UnsupportedOperationException if retainAll is unsupported
      */
+    @Override
     public boolean retainAll(final Collection<?> coll) {
         boolean changed = false;
         for (final Collection<E> item : all) {
@@ -315,6 +327,7 @@ public class CompositeSet<E> implements Set<E>, Serializable {
      *
      * @throws UnsupportedOperationException if clear is unsupported
      */
+    @Override
     public void clear() {
         for (final Collection<E> coll : all) {
             coll.clear();
diff --git a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
index 14fe6c0..41f6315 100644
--- a/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/ListOrderedSet.java
@@ -396,10 +396,12 @@ public class ListOrderedSet<E>
             last = null;
         }
 
+        @Override
         public boolean hasPrevious() {
             return ((ListIterator<E>) getIterator()).hasPrevious();
         }
 
+        @Override
         public E previous() {
             last = ((ListIterator<E>) getIterator()).previous();
             return last;
diff --git a/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java b/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java
index f1a4f13..0b6182c 100644
--- a/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/MapBackedSet.java
@@ -93,32 +93,39 @@ public final class MapBackedSet<E, V> implements Set<E>, Serializable {
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public int size() {
         return map.size();
     }
 
+    @Override
     public boolean isEmpty() {
         return map.isEmpty();
     }
 
+    @Override
     public Iterator<E> iterator() {
         return map.keySet().iterator();
     }
 
+    @Override
     public boolean contains(final Object obj) {
         return map.containsKey(obj);
     }
 
+    @Override
     public boolean containsAll(final Collection<?> coll) {
         return map.keySet().containsAll(coll);
     }
 
+    @Override
     public boolean add(final E obj) {
         final int size = map.size();
         map.put(obj, dummyValue);
         return map.size() != size;
     }
 
+    @Override
     public boolean addAll(final Collection<? extends E> coll) {
         final int size = map.size();
         for (final E e : coll) {
@@ -127,28 +134,34 @@ public final class MapBackedSet<E, V> implements Set<E>, Serializable {
         return map.size() != size;
     }
 
+    @Override
     public boolean remove(final Object obj) {
         final int size = map.size();
         map.remove(obj);
         return map.size() != size;
     }
 
+    @Override
     public boolean removeAll(final Collection<?> coll) {
         return map.keySet().removeAll(coll);
     }
 
+    @Override
     public boolean retainAll(final Collection<?> coll) {
         return map.keySet().retainAll(coll);
     }
 
+    @Override
     public void clear() {
         map.clear();
     }
 
+    @Override
     public Object[] toArray() {
         return map.keySet().toArray();
     }
 
+    @Override
     public <T> T[] toArray(final T[] array) {
         return map.keySet().toArray(array);
     }
diff --git a/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java b/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java
index 0610a64..631a451 100644
--- a/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/PredicatedSortedSet.java
@@ -92,28 +92,34 @@ public class PredicatedSortedSet<E> extends PredicatedSet<E> implements SortedSe
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public Comparator<? super E> comparator() {
         return decorated().comparator();
     }
 
+    @Override
     public E first() {
         return decorated().first();
     }
 
+    @Override
     public E last() {
         return decorated().last();
     }
 
+    @Override
     public SortedSet<E> subSet(final E fromElement, final E toElement) {
         final SortedSet<E> sub = decorated().subSet(fromElement, toElement);
         return new PredicatedSortedSet<E>(sub, predicate);
     }
 
+    @Override
     public SortedSet<E> headSet(final E toElement) {
         final SortedSet<E> head = decorated().headSet(toElement);
         return new PredicatedSortedSet<E>(head, predicate);
     }
 
+    @Override
     public SortedSet<E> tailSet(final E fromElement) {
         final SortedSet<E> tail = decorated().tailSet(fromElement);
         return new PredicatedSortedSet<E>(tail, predicate);
diff --git a/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java b/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java
index 29ae3fd..05d8fdd 100644
--- a/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java
+++ b/src/main/java/org/apache/commons/collections4/set/TransformedSortedSet.java
@@ -113,29 +113,35 @@ public class TransformedSortedSet<E> extends TransformedSet<E> implements Sorted
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public E first() {
         return getSortedSet().first();
     }
 
+    @Override
     public E last() {
         return getSortedSet().last();
     }
 
+    @Override
     public Comparator<? super E> comparator() {
         return getSortedSet().comparator();
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public SortedSet<E> subSet(final E fromElement, final E toElement) {
         final SortedSet<E> set = getSortedSet().subSet(fromElement, toElement);
         return new TransformedSortedSet<E>(set, transformer);
     }
 
+    @Override
     public SortedSet<E> headSet(final E toElement) {
         final SortedSet<E> set = getSortedSet().headSet(toElement);
         return new TransformedSortedSet<E>(set, transformer);
     }
 
+    @Override
     public SortedSet<E> tailSet(final E fromElement) {
         final SortedSet<E> set = getSortedSet().tailSet(fromElement);
         return new TransformedSortedSet<E>(set, transformer);
diff --git a/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java b/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java
index 0802637..22ebfc5 100644
--- a/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java
+++ b/src/main/java/org/apache/commons/collections4/splitmap/AbstractIterableGetMapDecorator.java
@@ -64,38 +64,47 @@ public class AbstractIterableGetMapDecorator<K, V> implements IterableGet<K, V>
         return map;
     }
 
+    @Override
     public boolean containsKey(final Object key) {
         return decorated().containsKey(key);
     }
 
+    @Override
     public boolean containsValue(final Object value) {
         return decorated().containsValue(value);
     }
 
+    @Override
     public Set<Map.Entry<K, V>> entrySet() {
         return decorated().entrySet();
     }
 
+    @Override
     public V get(final Object key) {
         return decorated().get(key);
     }
 
+    @Override
     public V remove(final Object key) {
         return decorated().remove(key);
     }
 
+    @Override
     public boolean isEmpty() {
         return decorated().isEmpty();
     }
 
+    @Override
     public Set<K> keySet() {
         return decorated().keySet();
     }
 
+    @Override
     public int size() {
         return decorated().size();
     }
 
+    @Override
     public Collection<V> values() {
         return decorated().values();
     }
@@ -104,6 +113,7 @@ public class AbstractIterableGetMapDecorator<K, V> implements IterableGet<K, V>
      * Get a MapIterator over this Get.
      * @return MapIterator<K, V>
      */
+    @Override
     public MapIterator<K, V> mapIterator() {
         return new EntrySetToMapIteratorAdapter<K, V>(entrySet());
     }
diff --git a/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java b/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java
index cb67c45..35e7491 100644
--- a/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java
+++ b/src/main/java/org/apache/commons/collections4/splitmap/TransformedSplitMap.java
@@ -199,14 +199,17 @@ public class TransformedSplitMap<J, K, U, V> extends AbstractIterableGetMapDecor
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public V put(final J key, final U value) {
         return decorated().put(transformKey(key), transformValue(value));
     }
 
+    @Override
     public void putAll(final Map<? extends J, ? extends U> mapToCopy) {
         decorated().putAll(transformMap(mapToCopy));
     }
 
+    @Override
     public void clear() {
         decorated().clear();
     }
diff --git a/src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java b/src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java
index 79a3be6..7224120 100644
--- a/src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java
+++ b/src/main/java/org/apache/commons/collections4/trie/AbstractBitwiseTrie.java
@@ -169,14 +169,17 @@ public abstract class AbstractBitwiseTrie<K, V> extends AbstractMap<K, V>
             return setValue(value);
         }
 
+        @Override
         public K getKey() {
             return key;
         }
 
+        @Override
         public V getValue() {
             return value;
         }
 
+        @Override
         public V setValue(final V value) {
             final V previous = this.value;
             this.value = value;
diff --git a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
index 613eade..bd11f75 100644
--- a/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
+++ b/src/main/java/org/apache/commons/collections4/trie/AbstractPatriciaTrie.java
@@ -771,10 +771,12 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
 
     //-----------------------------------------------------------------------
 
+    @Override
     public Comparator<? super K> comparator() {
         return getKeyAnalyzer();
     }
 
+    @Override
     public K firstKey() {
         if (size() == 0) {
             throw new NoSuchElementException();
@@ -782,6 +784,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
         return firstEntry().getKey();
     }
 
+    @Override
     public K lastKey() {
         final TrieEntry<K, V> entry = lastEntry();
         if (entry != null) {
@@ -790,6 +793,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
         throw new NoSuchElementException();
     }
 
+    @Override
     public K nextKey(final K key) {
         if (key == null) {
             throw new NullPointerException();
@@ -802,6 +806,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
         return null;
     }
 
+    @Override
     public K previousKey(final K key) {
         if (key == null) {
             throw new NullPointerException();
@@ -814,10 +819,12 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
         return null;
     }
 
+    @Override
     public OrderedMapIterator<K, V> mapIterator() {
         return new TrieMapIterator();
     }
 
+    @Override
     public SortedMap<K, V> prefixMap(final K key) {
         return getPrefixMapByBits(key, 0, lengthInBits(key));
     }
@@ -858,14 +865,17 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
         return new PrefixRangeMap(key, offsetInBits, lengthInBits);
     }
 
+    @Override
     public SortedMap<K, V> headMap(final K toKey) {
         return new RangeEntryMap(null, toKey);
     }
 
+    @Override
     public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
         return new RangeEntryMap(fromKey, toKey);
     }
 
+    @Override
     public SortedMap<K, V> tailMap(final K fromKey) {
         return new RangeEntryMap(fromKey, null);
     }
@@ -1422,6 +1432,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
          * An {@link Iterator} that returns {@link Entry} Objects.
          */
         private class EntryIterator extends TrieIterator<Map.Entry<K,V>> {
+            @Override
             public Map.Entry<K,V> next() {
                 return nextEntry();
             }
@@ -1464,6 +1475,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
          * An {@link Iterator} that returns Key Objects.
          */
         private class KeyIterator extends TrieIterator<K> {
+            @Override
             public K next() {
                 return nextEntry().getKey();
             }
@@ -1511,6 +1523,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
          * An {@link Iterator} that returns Value Objects.
          */
         private class ValueIterator extends TrieIterator<V> {
+            @Override
             public V next() {
                 return nextEntry().getValue();
             }
@@ -1567,10 +1580,12 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return AbstractPatriciaTrie.this.nextEntry(prior);
         }
 
+        @Override
         public boolean hasNext() {
             return next != null;
         }
 
+        @Override
         public void remove() {
             if (current == null) {
                 throw new IllegalStateException();
@@ -1595,10 +1610,12 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
 
         protected TrieEntry<K, V> previous; // the previous node to return
 
+        @Override
         public K next() {
             return nextEntry().getKey();
         }
 
+        @Override
         public K getKey() {
             if (current == null) {
                 throw new IllegalStateException();
@@ -1606,6 +1623,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return current.getKey();
         }
 
+        @Override
         public V getValue() {
             if (current == null) {
                 throw new IllegalStateException();
@@ -1613,6 +1631,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return current.getValue();
         }
 
+        @Override
         public V setValue(final V value) {
             if (current == null) {
                 throw new IllegalStateException();
@@ -1620,10 +1639,12 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return current.setValue(value);
         }
 
+        @Override
         public boolean hasPrevious() {
             return previous != null;
         }
 
+        @Override
         public K previous() {
             return previousEntry().getKey();
         }
@@ -1687,6 +1708,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
          */
         protected abstract boolean isToInclusive();
 
+        @Override
         public Comparator<? super K> comparator() {
             return AbstractPatriciaTrie.this.comparator();
         }
@@ -1734,6 +1756,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return entrySet;
         }
 
+        @Override
         public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
             if (!inRange2(fromKey)) {
                 throw new IllegalArgumentException("FromKey is out of range: " + fromKey);
@@ -1746,6 +1769,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return createRangeMap(fromKey, isFromInclusive(), toKey, isToInclusive());
         }
 
+        @Override
         public SortedMap<K, V> headMap(final K toKey) {
             if (!inRange2(toKey)) {
                 throw new IllegalArgumentException("ToKey is out of range: " + toKey);
@@ -1753,6 +1777,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return createRangeMap(getFromKey(), isFromInclusive(), toKey, isToInclusive());
         }
 
+        @Override
         public SortedMap<K, V> tailMap(final K fromKey) {
             if (!inRange2(fromKey)) {
                 throw new IllegalArgumentException("FromKey is out of range: " + fromKey);
@@ -1860,7 +1885,8 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
            this.toInclusive = toInclusive;
        }
 
-       public K firstKey() {
+       @Override
+    public K firstKey() {
            Map.Entry<K,V> e = null;
            if (fromKey == null) {
                e = firstEntry();
@@ -1879,7 +1905,8 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
            return first;
        }
 
-       public K lastKey() {
+       @Override
+    public K lastKey() {
            Map.Entry<K,V> e;
            if (toKey == null) {
                e = lastEntry();
@@ -2049,6 +2076,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
                 return next != null && !compare(next.key, excludedKey);
             }
 
+            @Override
             public Map.Entry<K,V> next() {
                 if (next == null || compare(next.key, excludedKey)) {
                     throw new NoSuchElementException();
@@ -2130,6 +2158,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return size;
         }
 
+        @Override
         public K firstKey() {
             fixup();
 
@@ -2148,6 +2177,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
             return first;
         }
 
+        @Override
         public K lastKey() {
             fixup();
 
@@ -2228,6 +2258,17 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
                                                  final K toKey, final boolean toInclusive) {
             return new RangeEntryMap(fromKey, fromInclusive, toKey, toInclusive);
         }
+
+        @Override
+        public void clear() {
+            Iterator<Map.Entry<K, V>> it = AbstractPatriciaTrie.this.entrySet().iterator();
+            Set<K> currentKeys = keySet();
+            while (it.hasNext()) {
+                if (currentKeys.contains(it.next().getKey())) {
+                    it.remove();
+                }
+            }
+        }
     }
 
     /**
@@ -2284,10 +2325,12 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
                 this.entry = entry;
             }
 
+            @Override
             public boolean hasNext() {
                 return hit == 0;
             }
 
+            @Override
             public Map.Entry<K, V> next() {
                 if (hit != 0) {
                     throw new NoSuchElementException();
@@ -2297,6 +2340,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
                 return entry;
             }
 
+            @Override
             public void remove() {
                 if (hit != 1) {
                     throw new IllegalStateException();
@@ -2333,6 +2377,7 @@ abstract class AbstractPatriciaTrie<K, V> extends AbstractBitwiseTrie<K, V> {
                 this.lengthInBits = lengthInBits;
             }
 
+            @Override
             public Map.Entry<K,V> next() {
                 final Map.Entry<K, V> entry = nextEntry();
                 if (lastOne) {
diff --git a/src/main/java/org/apache/commons/collections4/trie/KeyAnalyzer.java b/src/main/java/org/apache/commons/collections4/trie/KeyAnalyzer.java
index bd4176a..699eddf 100644
--- a/src/main/java/org/apache/commons/collections4/trie/KeyAnalyzer.java
+++ b/src/main/java/org/apache/commons/collections4/trie/KeyAnalyzer.java
@@ -134,6 +134,7 @@ public abstract class KeyAnalyzer<K> implements Comparator<K>, Serializable {
      */
     public abstract boolean isPrefix(K prefix, int offsetInBits, int lengthInBits, K key);
 
+    @Override
     @SuppressWarnings("unchecked")
     public int compare(final K o1, final K o2) {
         if (o1 == null) {
diff --git a/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java b/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java
index 3776fec..596abf6 100644
--- a/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java
+++ b/src/main/java/org/apache/commons/collections4/trie/UnmodifiableTrie.java
@@ -78,92 +78,114 @@ public class UnmodifiableTrie<K, V> implements Trie<K, V>, Serializable, Unmodif
 
     //-----------------------------------------------------------------------
 
+    @Override
     public Set<Entry<K, V>> entrySet() {
         return Collections.unmodifiableSet(delegate.entrySet());
     }
 
+    @Override
     public Set<K> keySet() {
         return Collections.unmodifiableSet(delegate.keySet());
     }
 
+    @Override
     public Collection<V> values() {
         return Collections.unmodifiableCollection(delegate.values());
     }
 
+    @Override
     public void clear() {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public boolean containsKey(final Object key) {
         return delegate.containsKey(key);
     }
 
+    @Override
     public boolean containsValue(final Object value) {
         return delegate.containsValue(value);
     }
 
+    @Override
     public V get(final Object key) {
         return delegate.get(key);
     }
 
+    @Override
     public boolean isEmpty() {
         return delegate.isEmpty();
     }
 
+    @Override
     public V put(final K key, final V value) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public void putAll(final Map<? extends K, ? extends V> m) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public V remove(final Object key) {
         throw new UnsupportedOperationException();
     }
 
+    @Override
     public int size() {
         return delegate.size();
     }
 
+    @Override
     public K firstKey() {
         return delegate.firstKey();
     }
 
+    @Override
     public SortedMap<K, V> headMap(final K toKey) {
         return Collections.unmodifiableSortedMap(delegate.headMap(toKey));
     }
 
+    @Override
     public K lastKey() {
         return delegate.lastKey();
     }
 
+    @Override
     public SortedMap<K, V> subMap(final K fromKey, final K toKey) {
         return Collections.unmodifiableSortedMap(delegate.subMap(fromKey, toKey));
     }
 
+    @Override
     public SortedMap<K, V> tailMap(final K fromKey) {
         return Collections.unmodifiableSortedMap(delegate.tailMap(fromKey));
     }
 
+    @Override
     public SortedMap<K, V> prefixMap(final K key) {
         return Collections.unmodifiableSortedMap(delegate.prefixMap(key));
     }
 
+    @Override
     public Comparator<? super K> comparator() {
         return delegate.comparator();
     }
 
     //-----------------------------------------------------------------------
+    @Override
     public OrderedMapIterator<K, V> mapIterator() {
         final OrderedMapIterator<K, V> it = delegate.mapIterator();
         return UnmodifiableOrderedMapIterator.unmodifiableOrderedMapIterator(it);
     }
 
+    @Override
     public K nextKey(K key) {
         return delegate.nextKey(key);
     }
 
+    @Override
     public K previousKey(K key) {
         return delegate.previousKey(key);
     }
diff --git a/src/site/xdoc/history.xml b/src/site/xdoc/history.xml
index 30e90de..bb1becc 100644
--- a/src/site/xdoc/history.xml
+++ b/src/site/xdoc/history.xml
@@ -125,7 +125,7 @@ an implementation of a Patricia Trie.
 <b>Collections 4.1</b> fixed some bugs in v4.0 and adds a few new enhancements.
 The most notable changes are new interfaces MultiSet (a replacement for the Bag
 interface which is fully compliant to the general Collection contract) and
-MultiValuedMapeList (a replacement for the MultiMap interface) as well as fluent
+MultiValuedMapList (a replacement for the MultiMap interface) as well as fluent
 API for Iterable instances (FluentIterable).
 </p>
 <p>
diff --git a/src/test/java/org/apache/commons/collections4/AbstractObjectTest.java b/src/test/java/org/apache/commons/collections4/AbstractObjectTest.java
index 7e14413..7b6b607 100644
--- a/src/test/java/org/apache/commons/collections4/AbstractObjectTest.java
+++ b/src/test/java/org/apache/commons/collections4/AbstractObjectTest.java
@@ -260,7 +260,7 @@ public abstract class AbstractObjectTest extends BulkTest {
      *
      * @param o Object to serialize
      * @param path path to write the serialized Object
-     * @exception IOException
+     * @throws IOException
      */
     protected void writeExternalFormToDisk(final Serializable o, final String path) throws IOException {
         final FileOutputStream fileStream = new FileOutputStream(path);
@@ -277,7 +277,7 @@ public abstract class AbstractObjectTest extends BulkTest {
      *
      * @param o Object to convert to bytes
      * @return serialized form of the Object
-     * @exception IOException
+     * @throws IOException
      */
     protected byte[] writeExternalFormToBytes(final Serializable o) throws IOException {
         final ByteArrayOutputStream byteStream = new ByteArrayOutputStream();
@@ -292,8 +292,8 @@ public abstract class AbstractObjectTest extends BulkTest {
      *
      * @param path path to the serialized Object
      * @return the Object at the given path
-     * @exception IOException
-     * @exception ClassNotFoundException
+     * @throws IOException
+     * @throws ClassNotFoundException
      */
     protected Object readExternalFormFromDisk(final String path) throws IOException, ClassNotFoundException {
         final FileInputStream stream = new FileInputStream(path);
@@ -310,8 +310,8 @@ public abstract class AbstractObjectTest extends BulkTest {
      *
      * @param b byte array containing a serialized Object
      * @return Object contained in the bytes
-     * @exception IOException
-     * @exception ClassNotFoundException
+     * @throws IOException
+     * @throws ClassNotFoundException
      */
     protected Object readExternalFormFromBytes(final byte[] b) throws IOException, ClassNotFoundException {
         final ByteArrayInputStream stream = new ByteArrayInputStream(b);
diff --git a/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java b/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java
index d9c2def..7307e7c 100644
--- a/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java
+++ b/src/test/java/org/apache/commons/collections4/ClosureUtilsTest.java
@@ -44,6 +44,7 @@ public class ClosureUtilsTest {
     static class MockClosure<T> implements Closure<T> {
         int count = 0;
 
+        @Override
         public void execute(final T object) {
             count++;
         }
@@ -56,6 +57,7 @@ public class ClosureUtilsTest {
     static class MockTransformer<T> implements Transformer<T, T> {
         int count = 0;
 
+        @Override
         public T transform(final T object) {
             count++;
             return object;
diff --git a/src/test/java/org/apache/commons/collections4/ListUtilsTest.java b/src/test/java/org/apache/commons/collections4/ListUtilsTest.java
index 7c43997..12c7cf5 100644
--- a/src/test/java/org/apache/commons/collections4/ListUtilsTest.java
+++ b/src/test/java/org/apache/commons/collections4/ListUtilsTest.java
@@ -124,6 +124,7 @@ public class ListUtilsTest {
     @Test
     public void testPredicatedList() {
         final Predicate<Object> predicate = new Predicate<Object>() {
+            @Override
             public boolean evaluate(final Object o) {
                 return o instanceof String;
             }
@@ -150,6 +151,7 @@ public class ListUtilsTest {
 
             private int index;
 
+            @Override
             public Integer create() {
                 index++;
                 return Integer.valueOf(index);
@@ -427,6 +429,7 @@ public class ListUtilsTest {
     }
 
     private static Predicate<Number> EQUALS_TWO = new Predicate<Number>() {
+        @Override
         public boolean evaluate(final Number input) {
             return input.intValue() == 2;
         }
diff --git a/src/test/java/org/apache/commons/collections4/MapPerformance.java b/src/test/java/org/apache/commons/collections4/MapPerformance.java
index c2201bf..4b79cc3 100644
--- a/src/test/java/org/apache/commons/collections4/MapPerformance.java
+++ b/src/test/java/org/apache/commons/collections4/MapPerformance.java
@@ -132,37 +132,49 @@ public class MapPerformance {
     // ----------------------------------------------------------------------
 
     private static class DummyMap<K, V> implements Map<K, V> {
+        @Override
         public void clear() {
         }
+        @Override
         public boolean containsKey(final Object key) {
             return false;
         }
+        @Override
         public boolean containsValue(final Object value) {
             return false;
         }
+        @Override
         public Set<Map.Entry<K, V>> entrySet() {
             return null;
         }
+        @Override
         public V get(final Object key) {
             return null;
         }
+        @Override
         public boolean isEmpty() {
             return false;
         }
+        @Override
         public Set<K> keySet() {
             return null;
         }
+        @Override
         public V put(final K key, final V value) {
             return null;
         }
+        @Override
         public void putAll(final Map<? extends K, ? extends V> t) {
         }
+        @Override
         public V remove(final Object key) {
             return null;
         }
+        @Override
         public int size() {
             return 0;
         }
+        @Override
         public Collection<V> values() {
             return null;
         }
diff --git a/src/test/java/org/apache/commons/collections4/MapUtilsTest.java b/src/test/java/org/apache/commons/collections4/MapUtilsTest.java
index 20b1888..f2ef8f8 100644
--- a/src/test/java/org/apache/commons/collections4/MapUtilsTest.java
+++ b/src/test/java/org/apache/commons/collections4/MapUtilsTest.java
@@ -16,7 +16,11 @@
  */
 package org.apache.commons.collections4;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotSame;
+import static org.junit.Assert.assertSame;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 import java.io.ByteArrayOutputStream;
 import java.io.PrintStream;
@@ -51,6 +55,7 @@ public class MapUtilsTest {
 
     public Predicate<Object> getPredicate() {
         return new Predicate<Object>() {
+            @Override
             public boolean evaluate(final Object o) {
                 return o instanceof String;
             }
@@ -107,6 +112,7 @@ public class MapUtilsTest {
     @Test
     public void testLazyMapTransformer() {
         final Map<Object, Object> map = MapUtils.lazyMap(new HashMap<Object, Object>(), new Transformer<Object, Object>() {
+            @Override
             public Object transform(final Object mapKey) {
                 if (mapKey instanceof String) {
                     return Integer.valueOf((String) mapKey);
@@ -820,6 +826,7 @@ public class MapUtilsTest {
             this.name = name;
         }
 
+        @Override
         public int compareTo(X o) {
             return key - o.key | name.compareTo(o.name);
         }
@@ -839,6 +846,7 @@ public class MapUtilsTest {
         // Now test key transform population
         final MultiValueMap<Integer, X> map = MultiValueMap.multiValueMap(new TreeMap<Integer, Collection<X>>());
         MapUtils.populateMap(map, list, new Transformer<X, Integer>() {
+            @Override
             public Integer transform(X input) {
                 return input.key;
             }
@@ -886,4 +894,21 @@ public class MapUtilsTest {
         assertSame(iMap, MapUtils.iterableMap(iMap));
     }
 
+    @Test 
+    public void testSize0() {
+        assertEquals(0, MapUtils.size(new HashMap<Object, Object>()));
+    }
+
+    @Test 
+    public void testSizeNull() {
+        assertEquals(0, MapUtils.size(null));
+    }
+
+    @Test 
+    public void testSize() {
+        final HashMap<Object, Object> map = new HashMap<Object, Object>();
+        map.put("A", "1");
+        map.put("B", "2");
+        assertEquals(2, MapUtils.size(map));
+    }
 }
diff --git a/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java b/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java
index 110422f..17cc8c6 100644
--- a/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java
+++ b/src/test/java/org/apache/commons/collections4/SplitMapUtilsTest.java
@@ -43,6 +43,7 @@ public class SplitMapUtilsTest {
     private TransformedSplitMap<String, String, String, Integer> transformedMap;
 
     private final Transformer<String, Integer> stringToInt = new Transformer<String, Integer>() {
+        @Override
         public Integer transform(final String input) {
             return Integer.valueOf(input);
         }
@@ -85,6 +86,7 @@ public class SplitMapUtilsTest {
         int sz = map.size();
 
         attemptPutOperation(new Runnable() {
+            @Override
             public void run() {
                 map.clear();
             }
@@ -93,6 +95,7 @@ public class SplitMapUtilsTest {
         assertEquals(sz, map.size());
 
         attemptPutOperation(new Runnable() {
+            @Override
             public void run() {
                 map.put("foo", 100);
             }
@@ -103,6 +106,7 @@ public class SplitMapUtilsTest {
         m.put("bar", 200);
         m.put("baz", 300);
         attemptPutOperation(new Runnable() {
+            @Override
             public void run() {
                 map.putAll(m);
             }
@@ -133,46 +137,55 @@ public class SplitMapUtilsTest {
     public void testWritableMap() {
         final Map<String, String> map = SplitMapUtils.writableMap(transformedMap);
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.get(null);
             }
         });
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.entrySet();
             }
         });
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.keySet();
             }
         });
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.values();
             }
         });
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.size();
             }
         });
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.isEmpty();
             }
         });
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.containsKey(null);
             }
         });
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.containsValue(null);
             }
         });
         attemptGetOperation(new Runnable() {
+            @Override
             public void run() {
                 map.remove(null);
             }
diff --git a/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java b/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java
index cb7a70c..fe30f26 100644
--- a/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java
+++ b/src/test/java/org/apache/commons/collections4/bag/PredicatedBagTest.java
@@ -46,6 +46,7 @@ public class PredicatedBagTest<T> extends AbstractBagTest<T> {
 
     protected Predicate<T> stringPredicate() {
         return new Predicate<T>() {
+            @Override
             public boolean evaluate(final T o) {
                 return o instanceof String;
             }
diff --git a/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java b/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java
index c7fb92d..71dc53f 100644
--- a/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java
+++ b/src/test/java/org/apache/commons/collections4/bag/PredicatedSortedBagTest.java
@@ -48,6 +48,7 @@ public class PredicatedSortedBagTest<T> extends AbstractSortedBagTest<T> {
 
     protected Predicate<T> stringPredicate() {
         return new Predicate<T>() {
+            @Override
             public boolean evaluate(final T o) {
                 return o instanceof String;
             }
diff --git a/src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java b/src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java
index 838d1e0..ff64bed 100644
--- a/src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java
+++ b/src/test/java/org/apache/commons/collections4/bag/TreeBagTest.java
@@ -77,6 +77,7 @@ public class TreeBagTest<T> extends AbstractSortedBagTest<T> {
         }
         
         final Bag<String> bag2 = new TreeBag<String>(new Comparator<String>() {
+            @Override
             public int compare(String o1, String o2) {
                 return o1.compareTo(o2);
             }
diff --git a/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java b/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java
index c597149..9dcc4b8 100644
--- a/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java
+++ b/src/test/java/org/apache/commons/collections4/bidimap/DualTreeBidiMap2Test.java
@@ -100,6 +100,7 @@ public class DualTreeBidiMap2Test<K extends Comparable<K>, V extends Comparable<
 
     private static class IntegerComparator implements Comparator<Integer>, Serializable{
         private static final long serialVersionUID = 1L;
+        @Override
         public int compare(final Integer o1, final Integer o2) {
             return o1.compareTo(o2);
         }
diff --git a/src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java b/src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java
index a72117e..4632057 100644
--- a/src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java
+++ b/src/test/java/org/apache/commons/collections4/collection/CompositeCollectionTest.java
@@ -127,6 +127,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
         setUpTest();
         c.setMutator(new CompositeCollection.CollectionMutator<E>() {
 
+            @Override
             public boolean add(final CompositeCollection<E> composite, final List<Collection<E>> collections, final E obj) {
                 for (final Collection<E> coll : collections) {
                     coll.add(obj);
@@ -134,6 +135,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
                 return true;
             }
 
+            @Override
             public boolean addAll(final CompositeCollection<E> composite,
                     final List<Collection<E>> collections, final Collection<? extends E> coll) {
                 for (final Collection<E> collection : collections) {
@@ -142,6 +144,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
                 return true;
             }
 
+            @Override
             public boolean remove(final CompositeCollection<E> composite,
                     final List<Collection<E>> collections, final Object obj) {
                 for (final Collection<E> collection : collections) {
@@ -243,6 +246,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
     public void testAddAllMutator() {
         setUpTest();
         c.setMutator(new CompositeCollection.CollectionMutator<E>() {
+            @Override
             public boolean add(final CompositeCollection<E> composite,
                     final List<Collection<E>> collections, final E obj) {
                 for (final Collection<E> collection : collections) {
@@ -251,6 +255,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
                 return true;
             }
 
+            @Override
             public boolean addAll(final CompositeCollection<E> composite,
                     final List<Collection<E>> collections, final Collection<? extends E> coll) {
                 for (final Collection<E> collection : collections) {
@@ -259,6 +264,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
                 return true;
             }
 
+            @Override
             public boolean remove(final CompositeCollection<E> composite,
                     final List<Collection<E>> collections, final Object obj) {
                 return false;
@@ -276,6 +282,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
     public void testAddMutator() {
         setUpTest();
         c.setMutator(new CompositeCollection.CollectionMutator<E>() {
+            @Override
             public boolean add(final CompositeCollection<E> composite,
                     final List<Collection<E>> collections, final E obj) {
                 for (final Collection<E> collection : collections) {
@@ -284,6 +291,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
                 return true;
             }
 
+            @Override
             public boolean addAll(final CompositeCollection<E> composite,
                     final List<Collection<E>> collections, final Collection<? extends E> coll) {
                 for (final Collection<E> collection : collections) {
@@ -292,6 +300,7 @@ public class CompositeCollectionTest<E> extends AbstractCollectionTest<E> {
                 return true;
             }
 
+            @Override
             public boolean remove(final CompositeCollection<E> composite,
                     final List<Collection<E>> collections, final Object obj) {
                 return false;
diff --git a/src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java b/src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java
index 7a71a71..f49d4a4 100644
--- a/src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java
+++ b/src/test/java/org/apache/commons/collections4/collection/IndexedCollectionTest.java
@@ -53,6 +53,7 @@ public class IndexedCollectionTest extends AbstractCollectionTest<String> {
     private static final class IntegerTransformer implements Transformer<String, Integer>, Serializable {
         private static final long serialVersionUID = 809439581555072949L;
 
+        @Override
         public Integer transform(final String input) {
             return Integer.valueOf(input);
         }
diff --git a/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java b/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java
index c1196e6..9e65488 100644
--- a/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java
+++ b/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionBuilderTest.java
@@ -137,6 +137,7 @@ public class PredicatedCollectionBuilderTest {
     }
 
     private static class OddPredicate implements Predicate<Integer> {
+        @Override
         public boolean evaluate(Integer value) {
             return value % 2 == 1;
         }
diff --git a/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java b/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java
index 53d42b9..ae1adcd 100644
--- a/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java
+++ b/src/test/java/org/apache/commons/collections4/collection/PredicatedCollectionTest.java
@@ -78,6 +78,7 @@ public class PredicatedCollectionTest<E> extends AbstractCollectionTest<E> {
     //-----------------------------------------------------------------------
     protected Predicate<E> testPredicate =
         new Predicate<E>() {
+            @Override
             public boolean evaluate(final E o) {
                 return o instanceof String;
             }
diff --git a/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java b/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java
index b59f1cc..9a3cac4 100644
--- a/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java
+++ b/src/test/java/org/apache/commons/collections4/collection/TransformedCollectionTest.java
@@ -35,6 +35,7 @@ import org.apache.commons.collections4.TransformerUtils;
 public class TransformedCollectionTest extends AbstractCollectionTest<Object> {
 
     private static class StringToInteger implements Transformer<Object, Object> {
+        @Override
         public Object transform(final Object input) {
             return Integer.valueOf((String) input);
         }
diff --git a/src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java b/src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java
index 24502fd..bf44d7d 100644
--- a/src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java
+++ b/src/test/java/org/apache/commons/collections4/comparators/ComparatorChainTest.java
@@ -105,6 +105,7 @@ public class ComparatorChainTest extends AbstractComparatorTest<ComparatorChainT
         // test that ComparatorChain handles this edge case correctly
         final ComparatorChain<Integer> chain = new ComparatorChain<Integer>();
         chain.addComparator(new Comparator<Integer>() {
+            @Override
             public int compare(final Integer a, final Integer b) {
                 final int result = a.compareTo(b);
                 if (result < 0) {
@@ -201,6 +202,7 @@ public class ComparatorChainTest extends AbstractComparatorTest<ComparatorChainT
             this.colIndex = colIndex;
         }
 
+        @Override
         public int compare(final PseudoRow o1, final PseudoRow o2) {
 
             final int col1 = o1.getColumn(colIndex);
diff --git a/src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java b/src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java
index 1b0bb33..2bdb650 100644
--- a/src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java
+++ b/src/test/java/org/apache/commons/collections4/functors/ComparatorPredicateTest.java
@@ -26,6 +26,7 @@ import org.junit.Test;
 
 public class ComparatorPredicateTest extends AbstractPredicateTest {
     private class TestComparator<T extends Comparable<T>> implements Comparator<T> {
+        @Override
         public int compare(final T first, final T second) {
             return first.compareTo(second);
         }
diff --git a/src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java
index cec3e66..201e905 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/BoundedIteratorTest.java
@@ -30,7 +30,7 @@ import org.junit.Test;
 public class BoundedIteratorTest<E> extends AbstractIteratorTest<E> {
 
     /** Test array of size 7 */
-    private String[] testArray = {
+    private final String[] testArray = {
         "a", "b", "c", "d", "e", "f", "g"
     };
 
@@ -353,6 +353,7 @@ public class BoundedIteratorTest<E> extends AbstractIteratorTest<E> {
     @Test
     public void testRemoveUnsupported() {
         Iterator<E> mockIterator = new AbstractIteratorDecorator<E>(testList.iterator()) {
+            @Override
             public void remove() {
                 throw new UnsupportedOperationException();
             }
diff --git a/src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java
index 6087c3d..7e4af43 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/FilterIteratorTest.java
@@ -159,6 +159,7 @@ public class FilterIteratorTest<E> extends AbstractIteratorTest<E> {
 
     private void verifyElementsInPredicate(final String[] elements) {
         final Predicate<E> pred = new Predicate<E>() {
+            @Override
             public boolean evaluate(final E x) {
                 for (final String element : elements) {
                     if (element.equals(x)) {
@@ -200,6 +201,7 @@ public class FilterIteratorTest<E> extends AbstractIteratorTest<E> {
      */
     protected FilterIterator<E> makePassThroughFilter(final Iterator<E> i) {
         final Predicate<E> pred = new Predicate<E>() {
+                @Override
                 public boolean evaluate(final E x) { return true; }
         };
         return new FilterIterator<E>(i, pred);
@@ -214,6 +216,7 @@ public class FilterIteratorTest<E> extends AbstractIteratorTest<E> {
      */
     protected FilterIterator<E> makeBlockAllFilter(final Iterator<E> i) {
         final Predicate<E> pred = new Predicate<E>() {
+                @Override
                 public boolean evaluate(final E x) { return false; }
         };
         return new FilterIterator<E>(i, pred);
diff --git a/src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java
index 8ad9480..ef8a9cf 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/FilterListIteratorTest.java
@@ -68,36 +68,42 @@ public class FilterListIteratorTest extends TestCase {
         }
 
         truePred = new Predicate<Integer>() {
+            @Override
             public boolean evaluate(final Integer x) {
                 return true;
             }
         };
 
         falsePred = new Predicate<Integer>() {
+            @Override
             public boolean evaluate(final Integer x) {
                 return true;
             }
         };
 
         evenPred = new Predicate<Integer>() {
+            @Override
             public boolean evaluate(final Integer x) {
                 return x % 2 == 0;
             }
         };
 
         oddPred = new Predicate<Integer>() {
+            @Override
             public boolean evaluate(final Integer x) {
                 return x % 2 != 0; //works for all numbers, not just >= 0 as is the case for "x % 2 == 1"
             }
         };
 
         threePred = new Predicate<Integer>() {
+            @Override
             public boolean evaluate(final Integer x) {
                 return x % 3 == 0;
             }
         };
 
         fourPred = new Predicate<Integer>() {
+            @Override
             public boolean evaluate(final Integer x) {
                 return x % 4 == 0;
             }
diff --git a/src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java b/src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java
index 60e030a..b5ed6b6 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/IteratorChainTest.java
@@ -93,6 +93,7 @@ public class IteratorChainTest extends AbstractIteratorTest<String> {
     public void testRemoveFromFilteredIterator() {
 
         final Predicate<Integer> myPredicate = new Predicate<Integer>() {
+            @Override
             public boolean evaluate(final Integer i) {
                 return i.compareTo(Integer.valueOf(4)) < 0;
             }
diff --git a/src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java b/src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java
index 9573cca..70aefbb 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/LazyIteratorChainTest.java
@@ -107,6 +107,7 @@ public class LazyIteratorChainTest extends AbstractIteratorTest<String> {
     public void testRemoveFromFilteredIterator() {
 
         final Predicate<Integer> myPredicate = new Predicate<Integer>() {
+            @Override
             public boolean evaluate(final Integer i) {
                 return i.compareTo(Integer.valueOf(4)) < 0;
             }
diff --git a/src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java
index 6593132..8a5da1f 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/NodeListIteratorTest.java
@@ -68,9 +68,11 @@ public class NodeListIteratorTest extends AbstractIteratorTest<Node> {
     @Override
     public Iterator<Node> makeEmptyIterator() {
         final NodeList emptyNodeList = new NodeList() {
+            @Override
             public Node item(final int index) {
                 throw new IndexOutOfBoundsException();
             }
+            @Override
             public int getLength() {
                 return 0;
             }
@@ -90,9 +92,11 @@ public class NodeListIteratorTest extends AbstractIteratorTest<Node> {
     @Override
     public Iterator<Node> makeObject() {
         final NodeList nodeList = new NodeList() {
+            @Override
             public Node item(final int index) {
                 return nodes[index];
             }
+            @Override
             public int getLength() {
                 return nodes.length;
             }
diff --git a/src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java
index afe4f80..9372efb 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/ObjectGraphIteratorTest.java
@@ -353,6 +353,7 @@ public class ObjectGraphIteratorTest extends AbstractIteratorTest<Object> {
 
     //-----------------------------------------------------------------------
     static class LeafFinder implements Transformer<Object, Object> {
+        @Override
         public Object transform(final Object input) {
             if (input instanceof Forest) {
                 return ((Forest) input).treeIterator();
diff --git a/src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java
index ee12aac..c16c959 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/PeekingIteratorTest.java
@@ -34,7 +34,7 @@ import org.junit.Test;
  */
 public class PeekingIteratorTest<E> extends AbstractIteratorTest<E> {
 
-    private String[] testArray = { "a", "b", "c" };
+    private final String[] testArray = { "a", "b", "c" };
 
     private List<E> testList;
     
diff --git a/src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java
index 5a677e5..5cf0501 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/PushbackIteratorTest.java
@@ -32,7 +32,7 @@ import org.junit.Test;
  */
 public class PushbackIteratorTest<E> extends AbstractIteratorTest<E> {
 
-    private String[] testArray = { "a", "b", "c" };
+    private final String[] testArray = { "a", "b", "c" };
 
     private List<E> testList;
 
diff --git a/src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java b/src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java
index 2eaaba3..070e310 100644
--- a/src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java
+++ b/src/test/java/org/apache/commons/collections4/iterators/SkippingIteratorTest.java
@@ -30,7 +30,7 @@ import org.junit.Test;
 public class SkippingIteratorTest<E> extends AbstractIteratorTest<E> {
 
     /** Test array of size 7 */
-    private String[] testArray = {
+    private final String[] testArray = {
         "a", "b", "c", "d", "e", "f", "g"
     };
 
diff --git a/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java b/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java
index fedaed8..8a5a6b7 100644
--- a/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java
+++ b/src/test/java/org/apache/commons/collections4/list/PredicatedListTest.java
@@ -58,6 +58,7 @@ public class PredicatedListTest<E> extends AbstractListTest<E> {
 
     protected Predicate<E> testPredicate =
         new Predicate<E>() {
+            @Override
             public boolean evaluate(final E o) {
                 return o instanceof String;
             }
diff --git a/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java b/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java
index ae73a96..ecaafdc 100644
--- a/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/CompositeMapTest.java
@@ -133,6 +133,7 @@ public class CompositeMapTest<K, V> extends AbstractIterableMapTest<K, V> {
             new CompositeMap.MapMutator<K, V>() {
             private static final long serialVersionUID = 1L;
 
+            @Override
             public void resolveCollision(final CompositeMap<K, V> composite,
             final Map<K, V> existing,
             final Map<K, V> added,
@@ -140,11 +141,13 @@ public class CompositeMapTest<K, V> extends AbstractIterableMapTest<K, V> {
                 pass = true;
             }
 
+            @Override
             public V put(final CompositeMap<K, V> map, final Map<K, V>[] composited, final K key,
                 final V value) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public void putAll(final CompositeMap<K, V> map, final Map<K, V>[] composited, final Map<? extends K, ? extends V> t) {
                 throw new UnsupportedOperationException();
             }
@@ -159,6 +162,7 @@ public class CompositeMapTest<K, V> extends AbstractIterableMapTest<K, V> {
         final CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo(),
             new CompositeMap.MapMutator<K, V>() {
             private static final long serialVersionUID = 1L;
+            @Override
             public void resolveCollision(final CompositeMap<K, V> composite,
             final Map<K, V> existing,
             final Map<K, V> added,
@@ -166,12 +170,14 @@ public class CompositeMapTest<K, V> extends AbstractIterableMapTest<K, V> {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public V put(final CompositeMap<K, V> map, final Map<K, V>[] composited, final K key,
                 final V value) {
                 pass = true;
                 return (V) "foo";
             }
 
+            @Override
             public void putAll(final CompositeMap<K, V> map, final Map<K, V>[] composited, final Map<? extends K, ? extends V> t) {
                 throw new UnsupportedOperationException();
             }
@@ -185,6 +191,7 @@ public class CompositeMapTest<K, V> extends AbstractIterableMapTest<K, V> {
         final CompositeMap<K, V> map = new CompositeMap<K, V>(buildOne(), buildTwo(),
             new CompositeMap.MapMutator<K, V>() {
             private static final long serialVersionUID = 1L;
+            @Override
             public void resolveCollision(final CompositeMap<K, V> composite,
             final Map<K, V> existing,
             final Map<K, V> added,
@@ -192,11 +199,13 @@ public class CompositeMapTest<K, V> extends AbstractIterableMapTest<K, V> {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public V put(final CompositeMap<K, V> map, final Map<K, V>[] composited, final K key,
                 final V value) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public void putAll(final CompositeMap<K, V> map, final Map<K, V>[] composited, final Map<? extends K, ? extends V> t) {
                 pass = true;
             }
diff --git a/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java b/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java
index 2ddcd80..32321d2 100644
--- a/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/DefaultedMapTest.java
@@ -106,6 +106,7 @@ public class DefaultedMapTest<K, V> extends AbstractIterableMapTest<K, V> {
     public void testMapGet4() {
         final HashMap<K, V> base = new HashMap<K, V>();
         final Map<K, V> map = DefaultedMap.defaultedMap(base, new Transformer<K, V>() {
+            @Override
             public V transform(final K input) {
                 if (input instanceof String) {
                     return (V) "NULL";
diff --git a/src/test/java/org/apache/commons/collections4/map/EmptyMapMutator.java b/src/test/java/org/apache/commons/collections4/map/EmptyMapMutator.java
index f46fdd9..1ccf61e 100644
--- a/src/test/java/org/apache/commons/collections4/map/EmptyMapMutator.java
+++ b/src/test/java/org/apache/commons/collections4/map/EmptyMapMutator.java
@@ -28,6 +28,7 @@ class EmptyMapMutator<K,V> implements CompositeMap.MapMutator<K,V> {
     /** Serialization version */
     private static final long serialVersionUID = -2729718980002476794L;
 
+    @Override
     public void resolveCollision(final CompositeMap<K,V> composite,
     final Map<K,V> existing,
     final Map<K,V> added,
@@ -35,10 +36,12 @@ class EmptyMapMutator<K,V> implements CompositeMap.MapMutator<K,V> {
         // Do nothing
     }
 
+    @Override
     public V put(final CompositeMap<K, V> map, final Map<K, V>[] composited, final K key, final V value) {
         return composited[0].put(key, value);
     }
 
+    @Override
     public void putAll(final CompositeMap<K, V> map, final Map<K, V>[] composited, final Map<? extends K, ? extends V> t) {
         composited[0].putAll(t);
     }
diff --git a/src/test/java/org/apache/commons/collections4/map/LazyMapTest.java b/src/test/java/org/apache/commons/collections4/map/LazyMapTest.java
index 4e233ab..756ae95 100644
--- a/src/test/java/org/apache/commons/collections4/map/LazyMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/LazyMapTest.java
@@ -74,6 +74,7 @@ public class LazyMapTest<K, V> extends AbstractIterableMapTest<K, V> {
     @Test
     public void mapGetWithTransformer() {
         final Transformer<Number, Integer> intConverter = new Transformer<Number, Integer>(){
+            @Override
             public Integer transform(final Number input) {
                 return input.intValue();
             }
diff --git a/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java b/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java
index edb44bd..c78b744 100644
--- a/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/PassiveExpiringMapTest.java
@@ -38,6 +38,7 @@ public class PassiveExpiringMapTest<K, V> extends AbstractMapTest<K, V> {
 
         private static final long serialVersionUID = 1L;
 
+        @Override
         public long expirationTime(final Integer key, final String value) {
             // odd keys expire immediately, even keys never expire
             if (key == null) {
diff --git a/src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java b/src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java
index 6dce129..23b5567 100644
--- a/src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/PredicatedMapTest.java
@@ -36,6 +36,7 @@ public class PredicatedMapTest<K, V> extends AbstractIterableMapTest<K, V> {
     protected static final Predicate<Object> truePredicate = TruePredicate.<Object>truePredicate();
 
     protected static final Predicate<Object> testPredicate = new Predicate<Object>() {
+        @Override
         public boolean evaluate(final Object o) {
             return o instanceof String;
         }
diff --git a/src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java b/src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java
index 287ca10..df77bec 100644
--- a/src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/map/PredicatedSortedMapTest.java
@@ -38,6 +38,7 @@ public class PredicatedSortedMapTest<K, V> extends AbstractSortedMapTest<K, V> {
     protected static final Predicate<Object> truePredicate = TruePredicate.truePredicate();
 
     protected static final Predicate<Object> testPredicate = new Predicate<Object>() {
+        @Override
         public boolean evaluate(final Object o) {
             return o instanceof String;
         }
diff --git a/src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java b/src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java
index 14b8a23..5171e4a 100644
--- a/src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java
+++ b/src/test/java/org/apache/commons/collections4/queue/PredicatedQueueTest.java
@@ -75,6 +75,7 @@ public class PredicatedQueueTest<E> extends AbstractQueueTest<E> {
 
     protected Predicate<E> testPredicate =
             new Predicate<E>() {
+                @Override
                 public boolean evaluate(final E o) {
                     return o instanceof String;
                 }
diff --git a/src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java b/src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java
index 9e453ae..63c90b9 100644
--- a/src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java
+++ b/src/test/java/org/apache/commons/collections4/sequence/SequencesComparatorTest.java
@@ -162,14 +162,17 @@ public class SequencesComparatorTest {
             index = 0;
         }
 
+        @Override
         public void visitInsertCommand(final T object) {
             v.add(index++, object);
         }
 
+        @Override
         public void visitKeepCommand(final T object) {
             ++index;
         }
 
+        @Override
         public void visitDeleteCommand(final T object) {
             v.remove(index);
         }
diff --git a/src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java b/src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java
index 047bc88..178a4cf 100644
--- a/src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java
+++ b/src/test/java/org/apache/commons/collections4/set/CompositeSetTest.java
@@ -97,16 +97,19 @@ public class CompositeSetTest<E> extends AbstractSetTest<E> {
         set.setMutator(new SetMutator<E>() {
             private static final long serialVersionUID = 1L;
 
+            @Override
             public void resolveCollision(final CompositeSet<E> comp, final Set<E> existing,
                 final Set<E> added, final Collection<E> intersects) {
                 //noop
             }
 
+            @Override
             public boolean add(final CompositeSet<E> composite,
                     final List<Set<E>> collections, final E obj) {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
             public boolean addAll(final CompositeSet<E> composite,
                     final List<Set<E>> collections, final Collection<? extends E> coll) {
                 throw new UnsupportedOperationException();
diff --git a/src/test/java/org/apache/commons/collections4/set/EmptySetMutator.java b/src/test/java/org/apache/commons/collections4/set/EmptySetMutator.java
index 7a25fd6..f998f16 100644
--- a/src/test/java/org/apache/commons/collections4/set/EmptySetMutator.java
+++ b/src/test/java/org/apache/commons/collections4/set/EmptySetMutator.java
@@ -36,14 +36,17 @@ class EmptySetMutator<E> implements CompositeSet.SetMutator<E> {
         this.contained = set;
     }
 
+    @Override
     public void resolveCollision(final CompositeSet<E> comp, final Set<E> existing, final Set<E> added, final Collection<E> intersects) {
         throw new IllegalArgumentException();
     }
 
+    @Override
     public boolean add(final CompositeSet<E> composite, final List<Set<E>> collections, final E obj) {
         return contained.add(obj);
     }
 
+    @Override
     public boolean addAll(final CompositeSet<E> composite, final List<Set<E>> collections, final Collection<? extends E> coll) {
         return contained.addAll(coll);
     }
diff --git a/src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java b/src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java
index 055749d..1fef276 100644
--- a/src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java
+++ b/src/test/java/org/apache/commons/collections4/set/PredicatedNavigableSetTest.java
@@ -64,6 +64,7 @@ public class PredicatedNavigableSetTest<E> extends AbstractNavigableSetTest<E> {
 //--------------------------------------------------------------------
     protected Predicate<E> testPredicate =
         new Predicate<E>() {
+            @Override
             public boolean evaluate(final E o) {
                 return o instanceof String && ((String) o).startsWith("A");
             }
diff --git a/src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java b/src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java
index 6df0b07..5e196cf 100644
--- a/src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java
+++ b/src/test/java/org/apache/commons/collections4/set/PredicatedSetTest.java
@@ -58,6 +58,7 @@ public class PredicatedSetTest<E> extends AbstractSetTest<E> {
 
     protected Predicate<E> testPredicate =
         new Predicate<E>() {
+            @Override
             public boolean evaluate(final E o) {
                 return o instanceof String;
             }
diff --git a/src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java b/src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java
index 278f226..a605898 100644
--- a/src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java
+++ b/src/test/java/org/apache/commons/collections4/set/PredicatedSortedSetTest.java
@@ -64,6 +64,7 @@ public class PredicatedSortedSetTest<E> extends AbstractSortedSetTest<E> {
 //--------------------------------------------------------------------
     protected Predicate<E> testPredicate =
         new Predicate<E>() {
+            @Override
             public boolean evaluate(final E o) {
                 return o instanceof String && ((String) o).startsWith("A");
             }
diff --git a/src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java b/src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java
index 4fd0208..1e08e2a 100644
--- a/src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java
+++ b/src/test/java/org/apache/commons/collections4/splitmap/TransformedSplitMapTest.java
@@ -37,18 +37,21 @@ import org.apache.commons.collections4.functors.NOPTransformer;
 public class TransformedSplitMapTest extends BulkTest {
 
     private final Transformer<Integer, String> intToString = new Transformer<Integer, String>() {
+        @Override
         public String transform(final Integer input) {
             return String.valueOf(input);
         }
     };
 
     private final Transformer<Object, Class<?>> objectToClass = new Transformer<Object, Class<?>>() {
+        @Override
         public java.lang.Class<?> transform(final Object input) {
             return input == null ? null : input.getClass();
         }
     };
 
     private final Transformer<String, Integer> stringToInt = new Transformer<String, Integer>() {
+        @Override
         public Integer transform(final String input) {
             return Integer.valueOf(input);
         }
diff --git a/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java b/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java
index 5a6ba81..92559fb 100755
--- a/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java
+++ b/src/test/java/org/apache/commons/collections4/trie/PatriciaTrieTest.java
@@ -16,15 +16,20 @@
  */
 package org.apache.commons.collections4.trie;
 
+import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.ConcurrentModificationException;
+import java.util.HashSet;
 import java.util.Iterator;
 import java.util.Map;
 import java.util.NoSuchElementException;
+import java.util.Set;
 import java.util.SortedMap;
 
 import junit.framework.Test;
 
 import org.apache.commons.collections4.BulkTest;
+import org.apache.commons.collections4.Trie;
 import org.apache.commons.collections4.map.AbstractSortedMapTest;
 import org.junit.Assert;
 
@@ -365,6 +370,64 @@ public class PatriciaTrieTest<V> extends AbstractSortedMapTest<String, V> {
         assertTrue(trie.prefixMap(prefixString).containsKey(longerString));
     }
 
+    public void testPrefixMapClear() {
+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();
+        trie.put("Anna", 1);
+        trie.put("Anael", 2);
+        trie.put("Analu", 3);
+        trie.put("Andreas", 4);
+        trie.put("Andrea", 5);
+        trie.put("Andres", 6);
+        trie.put("Anatole", 7);
+        SortedMap<String, Integer> prefixMap = trie.prefixMap("And");
+        assertEquals(new HashSet<String>(Arrays.asList("Andrea", "Andreas", "Andres")), prefixMap.keySet());
+        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<Integer>(prefixMap.values()));
+
+        prefixMap.clear();
+        assertTrue(prefixMap.isEmpty());
+        assertTrue(prefixMap.keySet().isEmpty());
+        assertTrue(prefixMap.values().isEmpty());
+        assertEquals(new HashSet<String>(Arrays.asList("Anael", "Analu", "Anatole", "Anna")), trie.keySet());
+        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<Integer>(trie.values()));
+    }
+
+    public void testPrefixMapClearNothing() {
+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();
+        SortedMap<String, Integer> prefixMap = trie.prefixMap("And");
+        assertEquals(new HashSet<String>(), prefixMap.keySet());
+        assertEquals(new ArrayList<Integer>(0), new ArrayList<Integer>(prefixMap.values()));
+
+        prefixMap.clear();
+        assertTrue(prefixMap.isEmpty());
+        assertTrue(prefixMap.keySet().isEmpty());
+        assertTrue(prefixMap.values().isEmpty());
+        assertEquals(new HashSet<String>(), trie.keySet());
+        assertEquals(new ArrayList<Integer>(0), new ArrayList<Integer>(trie.values()));
+    }
+
+    public void testPrefixMapClearUsingRemove() {
+        Trie<String, Integer> trie = new PatriciaTrie<Integer>();
+        trie.put("Anna", 1);
+        trie.put("Anael", 2);
+        trie.put("Analu", 3);
+        trie.put("Andreas", 4);
+        trie.put("Andrea", 5);
+        trie.put("Andres", 6);
+        trie.put("Anatole", 7);
+        SortedMap<String, Integer> prefixMap = trie.prefixMap("And");
+        assertEquals(new HashSet<String>(Arrays.asList("Andrea", "Andreas", "Andres")), prefixMap.keySet());
+        assertEquals(Arrays.asList(5, 4, 6), new ArrayList<Integer>(prefixMap.values()));
+
+        Set<String> keys = new HashSet<String>(prefixMap.keySet());
+        for (final String key : keys) {
+            prefixMap.remove(key);
+        }
+        assertTrue(prefixMap.keySet().isEmpty());
+        assertTrue(prefixMap.values().isEmpty());
+        assertEquals(new HashSet<String>(Arrays.asList("Anael", "Analu", "Anatole", "Anna")), trie.keySet());
+        assertEquals(Arrays.asList(2, 3, 7, 1), new ArrayList<Integer>(trie.values()));
+    }
+
     //-----------------------------------------------------------------------
 
     @Override
